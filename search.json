[{"path":[]},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement matthew.heun@.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://matthewheun.github.io/matsindf/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://matthewheun.github.io/matsindf/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to matsindf","title":"Contributing to matsindf","text":"document outlines propose change matsindf package.","code":""},{"path":"https://matthewheun.github.io/matsindf/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to matsindf","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://matthewheun.github.io/matsindf/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to matsindf","text":"want make change bigger fixing typos, first file issue GitHub make sure someone team agrees proposed change needed. ’ve found bug, please file issue illustrates bug minimal reprex.","code":""},{"path":"https://matthewheun.github.io/matsindf/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to matsindf","text":"Fork package clone onto computer. Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(). Follow prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e., beneath “always resolves latest release.”).","code":""},{"path":"https://matthewheun.github.io/matsindf/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to matsindf","text":"New code written style matches rest code matsindf. use roxygen2, Markdown syntax, documentation.","code":""},{"path":"https://matthewheun.github.io/matsindf/CONTRIBUTING.html","id":"tests","dir":"","previous_headings":"Bigger changes","what":"Tests","title":"Contributing to matsindf","text":"use testthat unit tests. maintain 100% test coverage. Contributions reduce test coverage less 100% rejected.","code":""},{"path":"https://matthewheun.github.io/matsindf/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to matsindf","text":"Please note RCLabels project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://matthewheun.github.io/matsindf/CONTRIBUTING.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributing to matsindf","text":"guide contributing adapted Contributing guide usethis package.","code":""},{"path":"https://matthewheun.github.io/matsindf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 matsindf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://matthewheun.github.io/matsindf/articles/iris_pca.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using matsindf for principal components analysis","text":"working tidy data, can challenging use R operations take matrices. functions matsindf make easier.","code":""},{"path":"https://matthewheun.github.io/matsindf/articles/iris_pca.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Using matsindf for principal components analysis","text":"illustrate handle cases matsindf functions principal components analysis (PCA) classic Fisher iris dataset, often used illustrate PCA. using “long” input table, measurement, rather flower, single row.","code":"long_iris <- datasets::iris %>%   dplyr::mutate(flower = sprintf(\"flower_%d\", 1:nrow(datasets::iris))) %>%   tidyr::pivot_longer(     cols = c(-Species, -flower), names_to = \"dimension\", values_to = \"length\"   ) %>%   dplyr::rename(species = Species) %>%   dplyr::select(flower, species, dimension, length) %>%   dplyr::mutate(species = as.character(species))  head(long_iris, n = 5) #> # A tibble: 5 × 4 #>   flower   species dimension    length #>   <chr>    <chr>   <chr>         <dbl> #> 1 flower_1 setosa  Sepal.Length    5.1 #> 2 flower_1 setosa  Sepal.Width     3.5 #> 3 flower_1 setosa  Petal.Length    1.4 #> 4 flower_1 setosa  Petal.Width     0.2 #> 5 flower_2 setosa  Sepal.Length    4.9"},{"path":"https://matthewheun.github.io/matsindf/articles/iris_pca.html","id":"generate-pca-results","dir":"Articles","previous_headings":"","what":"Generate PCA results","title":"Using matsindf for principal components analysis","text":"Using matsindf, can convert matrix, apply PCA, convert back long format table. result coordinates iris data along principal components, long format table. just need add back species column … … followed familiar PCA plot.  expected, see distribution measurements differs across three species iris.","code":"long_pca_embeddings <- long_iris %>%   collapse_to_matrices(     rownames = \"flower\", colnames = \"dimension\", matvals = \"length\"   ) %>%   dplyr::transmute(projection = lapply(length, function(mat)     stats::prcomp(mat, center = TRUE, scale = TRUE)$x   )) %>%   expand_to_tidy(     rownames = \"flower\", colnames = \"component\", matvals = \"projection\"   ) head(long_pca_embeddings, n = 5) #>       flower component projection #> 1   flower_1       PC1 -2.2571412 #> 2  flower_10       PC1 -2.1770349 #> 3 flower_100       PC1  0.2558734 #> 4 flower_101       PC1  1.8384100 #> 5 flower_102       PC1  1.1540156 long_pca_withspecies <- long_iris %>%   dplyr::select(flower, species) %>%   dplyr::distinct() %>%   dplyr::left_join(long_pca_embeddings, by = \"flower\") head(long_pca_withspecies, n = 5) #> # A tibble: 5 × 4 #>   flower   species component projection #>   <chr>    <chr>   <chr>          <dbl> #> 1 flower_1 setosa  PC1          -2.26   #> 2 flower_1 setosa  PC2          -0.478  #> 3 flower_1 setosa  PC3           0.127  #> 4 flower_1 setosa  PC4          -0.0241 #> 5 flower_2 setosa  PC1          -2.07 long_pca_withspecies %>%   tidyr::pivot_wider(     id_cols = c(flower, species), names_from = component,     values_from = projection   ) %>%   ggplot2::ggplot(ggplot2::aes(x = PC1, y = PC2, colour = species)) +    ggplot2::geom_point() +   ggplot2::labs(colour = ggplot2::element_blank()) +   ggplot2::theme_bw() +   ggplot2::coord_equal()"},{"path":"https://matthewheun.github.io/matsindf/articles/iris_pca.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Using matsindf for principal components analysis","text":"matsindf simplifies tasks otherwise much difficult.","code":""},{"path":"https://matthewheun.github.io/matsindf/articles/matsindf.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Use Cases and Examples for matsindf","text":"Matrices important mathematical objects, often describe networks flows among nodes. Example networks given following table. power matrices lies ability organize network-wide calculations, thereby simplifying work analysts study entire systems. wouldn’t nice easy way create R data frames whose entries numbers entire matrices? possible, matrix algebra performed columns similar matrices. ’s reason matsindf. provides functions convert suitably-formatted tidy data frame data frame containing column matrices. Furthermore, matsbyname sister package provides matrix algebra functions respect names matrix rows columns (dimnames R) free analyst task aligning rows columns operands (matrices) passed matrix algebra functions allows matrix algebra conducted within data frames using dplyr, tidyr, tidyverse functions. used together, matsindf matsbyname allow analysts wield simultaneously power matrix mathematics tidyverse functional programming. vignette demonstrates use packages suggests workflow accomplish sophisticated analyses using matrices data frames (matsindf).","code":""},{"path":"https://matthewheun.github.io/matsindf/articles/matsindf.html","id":"data-ukenergy2000","dir":"Articles","previous_headings":"","what":"Data: UKEnergy2000","title":"Use Cases and Examples for matsindf","text":"demonstrate use matsindf functions, consider network energy flows environment, transformation distribution processes, , ultimately, final demand. energy flow networks called energy conversion chains (ECCs), example based approximation portion UK’s ECC circa 2000. (Note data used demonstration purposes rounded 1–2 significant digits.) example data first appeared Figures 3 4 Heun, Owen, Brockway (2018). Country Year contain one value , GB 2000 respectively. Following conventions International Energy Agency’s energy balance tables, Ledger.side indicates Supply Consumption; Flow.aggregation.point indicates data aggregated; Flow indicates industry, machine, final demand sector flow; Product indicates energy carrier flow; E.ktoe gives magnitude flow units kilotons oil equivalent (ktoe). flow observation (row) UKEnergy2000 data frame, making tidy. remainder vignette demonstrates analysis conducted using UKEnergy2000 data frame basis. : shows collapse spread data appropriate matrices stored columns data frame, demonstrates analyzing matrices matsbyname functions, illustrates expanding matrices back tidy data frame, uses ggplot graph results.","code":"head(UKEnergy2000, 2) #>   Country Year Ledger.side      Flow.aggregation.point              Flow #> 1      GB 2000      Supply Total primary energy supply Resources - Crude #> 2      GB 2000      Supply Total primary energy supply    Resources - NG #>   Product E.ktoe #> 1   Crude  50000 #> 2      NG  43000"},{"path":[]},{"path":"https://matthewheun.github.io/matsindf/articles/matsindf.html","id":"prepare-for-collapse","dir":"Articles","previous_headings":"Suggested workflow","what":"Prepare for collapse","title":"Use Cases and Examples for matsindf","text":"EnergyUK2000 data frame similar “cleaned” data external source: missing entries, tidy. data organized matrices, additional metadata needed. collapse_to_matrices function converts tidy data frame matsindf data frame using using information within tidy data frame. first task prepare collapse adding metadata columns. collapse_to_matrices needs following information: following code gives approach adding metadata, appropriate application, relying Ledger.side, sign E.ktoe, knowledge rows columns matrix. type network algorithm identifying row names, column names, row types, column types tidy data frame.","code":"UKEnergy2000_with_metadata <- UKEnergy2000 %>%    # Add a column indicating the matrix in which this entry belongs (U, V, or Y).   matsindf:::add_UKEnergy2000_matnames() %>%    # Add columns for row names, column names, row types, and column types.   matsindf:::add_UKEnergy2000_row_col_meta() %>%    mutate(     # Eliminate columns we no longer need     Ledger.side = NULL,     Flow.aggregation.point = NULL,     Flow = NULL,     Product = NULL,      # Ensure that all energy values are positive, as required for analysis.     E.ktoe = abs(E.ktoe)   ) head(UKEnergy2000_with_metadata, 2) #>   Country Year E.ktoe matname           rowname colname  rowtype coltype #> 1      GB 2000  50000       V Resources - Crude   Crude Industry Product #> 2      GB 2000  43000       V    Resources - NG      NG Industry Product"},{"path":"https://matthewheun.github.io/matsindf/articles/matsindf.html","id":"collapse","dir":"Articles","previous_headings":"Suggested workflow","what":"Collapse","title":"Use Cases and Examples for matsindf","text":"metadata now place, UKEnergy2000_with_metadata can collapsed matsindf data frame collapse_to_matrices function. Much like dplyr::summarise, collapse_to_matrices relies grouping indicate rows tidy data frame belong matrices. usual approach tidyr::group_by matnames column columns preserved output, case Country Year.","code":"EnergyMats_2000 <- UKEnergy2000_with_metadata %>%    group_by(Country, Year, matname) %>%    collapse_to_matrices(matnames = \"matname\", matvals = \"E.ktoe\",                        rownames = \"rowname\", colnames = \"colname\",                         rowtypes = \"rowtype\", coltypes = \"coltype\") %>%    rename(matrix.name = matname, matrix = E.ktoe)  # The remaining columns are Country, Year, matrix.name, and matrix glimpse(EnergyMats_2000) #> Rows: 3 #> Columns: 4 #> $ Country     <chr> \"GB\", \"GB\", \"GB\" #> $ Year        <int> 2000, 2000, 2000 #> $ matrix.name <chr> \"U\", \"V\", \"Y\" #> $ matrix      <list> <<matrix[11 x 9]>>, <<matrix[11 x 12]>>, <<matrix[4 x 2]>>  # To access one of the matrices, try one of these approaches: (EnergyMats_2000 %>% filter(matrix.name == \"U\"))[[\"matrix\"]] # The U matrix #> [[1]] #>                Crude dist. Diesel dist. Elect. grid Gas wells & proc. NG dist. #> Crude                    0            0           0                 0        0 #> Crude - Dist.            0            0           0                 0        0 #> Crude - Fields       47500            0           0                 0        0 #> Diesel                   0        15500           0                 0        0 #> Diesel - Dist.          25            0           0                50       25 #> Elect                    0            0        6400                 0        0 #> Elect - Grid            25            0           0                25       25 #> NG                       0            0           0             43000        0 #> NG - Dist.               0            0           0                 0        0 #> NG - Wells               0            0           0                 0    41000 #> Petrol                   0            0           0                 0        0 #>                Oil fields Oil refineries Petrol dist. Power plants #> Crude               50000              0            0            0 #> Crude - Dist.           0          47000            0            0 #> Crude - Fields          0              0            0            0 #> Diesel                  0              0            0            0 #> Diesel - Dist.         50              0          250            0 #> Elect                   0              0            0            0 #> Elect - Grid           25             75            0          100 #> NG                      0              0            0            0 #> NG - Dist.              0              0            0        16000 #> NG - Wells              0              0            0            0 #> Petrol                  0              0        26500            0 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\"  EnergyMats_2000$matrix[[2]] # The V matrix #>                   Crude Crude - Dist. Crude - Fields Diesel Diesel - Dist. #> Crude dist.           0         47000              0      0              0 #> Diesel dist.          0             0              0      0          15150 #> Elect. grid           0             0              0      0              0 #> Gas wells & proc.     0             0              0      0              0 #> NG dist.              0             0              0      0              0 #> Oil fields            0             0          47500      0              0 #> Oil refineries        0             0              0  15500              0 #> Petrol dist.          0             0              0      0              0 #> Power plants          0             0              0      0              0 #> Resources - Crude 50000             0              0      0              0 #> Resources - NG        0             0              0      0              0 #>                   Elect Elect - Grid    NG NG - Dist. NG - Wells Petrol #> Crude dist.           0            0     0          0          0      0 #> Diesel dist.          0            0     0          0          0      0 #> Elect. grid           0         6275     0          0          0      0 #> Gas wells & proc.     0            0     0          0      41000      0 #> NG dist.              0            0     0      41000          0      0 #> Oil fields            0            0     0          0          0      0 #> Oil refineries        0            0     0          0          0  26500 #> Petrol dist.          0            0     0          0          0      0 #> Power plants       6400            0     0          0          0      0 #> Resources - Crude     0            0     0          0          0      0 #> Resources - NG        0            0 43000          0          0      0 #>                   Petrol - Dist. #> Crude dist.                    0 #> Diesel dist.                   0 #> Elect. grid                    0 #> Gas wells & proc.              0 #> NG dist.                       0 #> Oil fields                     0 #> Oil refineries                 0 #> Petrol dist.               26000 #> Power plants                   0 #> Resources - Crude              0 #> Resources - NG                 0 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\"  EnergyMats_2000$matrix[[3]] # The Y matrix #>                Residential Transport #> Diesel - Dist.           0     14750 #> Elect - Grid          6000         0 #> NG - Dist.           25000         0 #> Petrol - Dist.           0     26000 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Sector\""},{"path":"https://matthewheun.github.io/matsindf/articles/matsindf.html","id":"duplicate-for-purposes-of-illustration","dir":"Articles","previous_headings":"Suggested workflow","what":"Duplicate (for purposes of illustration)","title":"Use Cases and Examples for matsindf","text":"Larger studies include data multiple countries years. ECC data UK year 2000 can duplicated 2001 fictitious country AB. Although data unchanged, additional rows serve illustrate functional programming aspects matsindf matsbyname packages.","code":"Energy <- EnergyMats_2000 %>%    # Create rows for a fictitious country \"AB\".   # Although the rows for \"AB\" are same as the \"GB\" rows,   # they serve to illustrate functional programming with matsindf.   rbind(EnergyMats_2000 %>% mutate(Country = \"AB\")) %>%    spread(key = Year, value = matrix) %>%    mutate(     # Create a column for a second year (2001).     `2001` = `2000`   ) %>%    gather(key = Year, value = matrix, `2000`, `2001`) %>%    # Now spread to put each matrix in a column.   spread(key = matrix.name, value = matrix)  glimpse(Energy) #> Rows: 4 #> Columns: 5 #> $ Country <chr> \"AB\", \"AB\", \"GB\", \"GB\" #> $ Year    <chr> \"2000\", \"2001\", \"2000\", \"2001\" #> $ U       <list> <<matrix[11 x 9]>>, <<matrix[11 x 9]>>, <<matrix[11 x 9]>>, <<… #> $ V       <list> <<matrix[11 x 12]>>, <<matrix[11 x 12]>>, <<matrix[11 x 12]>>,… #> $ Y       <list> <<matrix[4 x 2]>>, <<matrix[4 x 2]>>, <<matrix[4 x 2]>>, <<ma…"},{"path":"https://matthewheun.github.io/matsindf/articles/matsindf.html","id":"verify-data","dir":"Articles","previous_headings":"Suggested workflow","what":"Verify data","title":"Use Cases and Examples for matsindf","text":"important step analysis data verification. ECC analysis, important verify energy conserved (.e., energy balance) across industries. Equations 1 2 Heun, Owen, Brockway (2018) show energy balance verified \\[\\mathbf{W} = \\mathbf{V}^\\mathrm{T} - \\mathbf{U},\\] \\[\\mathbf{W}\\mathbf{} - \\mathbf{Y}\\mathbf{} = \\mathbf{0}.\\] Energy balance verification can implemented matsbyname functions tidyverse functional programming: example demonstrates energy balance can verified combinations Country Year lines code. fact, exact code can applied Energy data frame, regardless number rows . Secure knowledge energy conserved across ECCs Energy data frame, analyses can proceed.","code":"Check <- Energy %>%    mutate(     W = difference_byname(transpose_byname(V), U),     # Need to change column name and type on y so it can be subtracted from row sums of W     err = difference_byname(rowsums_byname(W),                              rowsums_byname(Y) %>%                                setcolnames_byname(\"Industry\") %>% setcoltype(\"Industry\")),     EBalOK = iszero_byname(err)   ) Check %>% select(Country, Year, EBalOK) #>   Country Year EBalOK #> 1      AB 2000   TRUE #> 2      AB 2001   TRUE #> 3      GB 2000   TRUE #> 4      GB 2001   TRUE all(Check$EBalOK %>% as.logical()) #> [1] TRUE"},{"path":"https://matthewheun.github.io/matsindf/articles/matsindf.html","id":"efficiencies","dir":"Articles","previous_headings":"Suggested workflow","what":"Efficiencies","title":"Use Cases and Examples for matsindf","text":"illustrate power matsbyname functions context matsindf, consider calculation efficiency every industry ECC column vector \\(\\eta\\) shown Equation 11 Heun, Owen, Brockway (2018). \\[\\mathbf{g} = \\mathbf{V}\\mathbf{}\\] \\[\\mathbf{\\eta} = \\widehat{\\mathbf{U}^\\mathrm{T} \\mathbf{}}^{\\mathrm{-}1} \\mathbf{g}\\] Note lines code required perform series matrix operations every combination Country Year. fact, code used calculate efficiency number industries number countries years!","code":"Etas <- Energy %>%    mutate(     g = rowsums_byname(V),     eta = transpose_byname(U) %>% rowsums_byname() %>%        hatize_byname(keep = \"rownames\") %>% invert_byname() %>%        matrixproduct_byname(g) %>%        setcolnames_byname(\"eta\") %>% setcoltype(\"Efficiency\")   ) %>%    select(Country, Year, eta)  Etas$eta[[1]] #>                         eta #> Crude dist.       0.9884332 #> Diesel dist.      0.9774194 #> Elect. grid       0.9804688 #> Gas wells & proc. 0.9518282 #> NG dist.          0.9987820 #> Oil fields        0.9485771 #> Oil refineries    0.8921933 #> Petrol dist.      0.9719626 #> Power plants      0.3975155 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Efficiency\""},{"path":"https://matthewheun.github.io/matsindf/articles/matsindf.html","id":"expand","dir":"Articles","previous_headings":"Suggested workflow","what":"Expand","title":"Use Cases and Examples for matsindf","text":"Plotting values matsindf data frame can accomplished expanding matrices matsindf data frame (example, Etas) back tidy data frame. Expanding reverse collapse-ing, following information must supplied expand_to_tidy function: Prior expanding, usually necessary gather columns matrices. etas_forgraphing data frame efficiencies, one Country, Year, Industry, format amenable plotting packages ggplot.","code":"etas_forgraphing <- Etas %>%    gather(key = matrix.names, value = matrix, eta) %>%    expand_to_tidy(matnames = \"matrix.names\", matvals = \"matrix\",                   rownames = \"Industry\", colnames = \"etas\",                   rowtypes = \"rowtype\", coltypes = \"Efficiencies\") %>%    mutate(     # Eliminate columns we no longer need.     matrix.names = NULL,     etas = NULL,      rowtype = NULL,      Efficiencies = NULL   ) %>%    rename(     eta = matrix   )  # Compare to Figure 8 of Heun, Owen, and Brockway (2018) etas_forgraphing %>% filter(Country == \"GB\", Year == 2000) #> # A tibble: 9 × 4 #>   Country Year  Industry            eta #>   <chr>   <chr> <chr>             <dbl> #> 1 GB      2000  Crude dist.       0.988 #> 2 GB      2000  Diesel dist.      0.977 #> 3 GB      2000  Elect. grid       0.980 #> 4 GB      2000  Gas wells & proc. 0.952 #> 5 GB      2000  NG dist.          0.999 #> 6 GB      2000  Oil fields        0.949 #> 7 GB      2000  Oil refineries    0.892 #> 8 GB      2000  Petrol dist.      0.972 #> 9 GB      2000  Power plants      0.398"},{"path":"https://matthewheun.github.io/matsindf/articles/matsindf.html","id":"report","dir":"Articles","previous_headings":"Suggested workflow","what":"Report","title":"Use Cases and Examples for matsindf","text":"following code creates bar graph efficiency results UK 2000:","code":"etas_UK_2000 <- etas_forgraphing %>% filter(Country == \"GB\", Year == 2000)   etas_UK_2000 %>%    ggplot(mapping = aes_string(x = \"Industry\", y = \"eta\",                                fill = \"Industry\", colour = \"Industry\")) +    geom_bar(stat = \"identity\") +   labs(x = NULL, y = expression(eta[UK*\",\"*2000]), fill = NULL) +    scale_y_continuous(breaks = seq(0, 1, by = 0.2)) +   scale_fill_manual(values = rep(\"white\", nrow(etas_UK_2000))) +   scale_colour_manual(values = rep(\"gray20\", nrow(etas_UK_2000))) +    guides(fill = FALSE, colour = FALSE) +   theme(axis.text.x = element_text(angle = 90, vjust = 0.4, hjust = 1)) #> Warning: `aes_string()` was deprecated in ggplot2 3.0.0. #> ℹ Please use tidy evaluation idioms with `aes()`. #> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as #> of ggplot2 3.3.4. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://matthewheun.github.io/matsindf/articles/matsindf.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Use Cases and Examples for matsindf","text":"vignette demonstrated use matsindf matsbyname packages suggested workflow accomplish sophisticated analyses using matrices data frames (matsindf). workflow follows: Reshape data tidy data frame columns matrix name, element value, row name, column name, row type, column type, similar UKEnergy2000 . Use collapse_to_matrices create data frame matrices columns matrix names matrices , similar EnergyMats_2000 . tidyr::spread matrices obtain data frame columns matrix, similar Energy . Validate data, similar Check . Perform matrix algebra operations columns matrices using matsbyname functions manner similar process generating Etas data frame . tidyr::gather columns obtain tidy data frame matrices. Use expand_to_tidy create tidy data frame matrix elements, similar etas_forgraphing . Plot report results demonstrated graph . Data frames matrices, created matsindf, like magic spreadsheets single cells contain entire matrices. data structure, analysts can wield simultaneously power matrix mathematics tidyverse functional programming.","code":""},{"path":[]},{"path":"https://matthewheun.github.io/matsindf/articles/midf_apply_primer.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A matsindf_apply primer","text":"matsindf_apply() powerful versatile function enables analysis lists data frames applying FUN helpful ways. function called matsindf_apply(), can used apply FUN matsindf data frame, data frame contains matrices individual entries data frame. (matsindf data frame can created calling collapse_to_matrices(), demonstrated .) matsindf_apply() can apply FUN across much : data frames single numbers, lists matrices, lists single numbers, individual numbers. vignette demonstrates matsindf_apply(), starting simple examples proceeding toward sophisticated analyses.","code":""},{"path":"https://matthewheun.github.io/matsindf/articles/midf_apply_primer.html","id":"the-basics","dir":"Articles","previous_headings":"","what":"The basics","title":"A matsindf_apply primer","text":"basis analyses conducted matsindf_apply() function (FUN) applied across data supplied .dat .... FUN must return named list variables result. example function adds subtracts arguments, b, returns list containing result, c d. Similar lapply() siblings, additional argument(s) matsindf_apply() include data FUN applied. arguments can, first instance, supplied named arguments ... argument matsindf_apply(). arguments ... must named. ... arguments matsindf_apply() passed FUN according names. case, output matsindf_apply() named list returned FUN. Passing additional argument (z = 2) causes unused argument error, example_fun z argument. Failing pass needed argument (b) causes error indicates missing argument. Alternatively, arguments FUN can given named list .dat, first argument matsindf_apply(). value assigned .dat, return value matsindf_apply() contains named variables .dat (case b) addition results provided FUN (case c d). Extra variables tolerated .dat, .dat considered store data variables can drawn needed. contrast, arguments ... named explicitly user, including extra argument ... considered error, shown .","code":"example_fun <- function(a, b){   return(list(c = matsbyname::sum_byname(a, b),                d = matsbyname::difference_byname(a, b))) } matsindf_apply(FUN = example_fun, a = 2, b = 1) #> $c #> [1] 3 #>  #> $d #> [1] 1 tryCatch(   matsindf_apply(FUN = example_fun, a = 2, b = 1, z = 2),   error = function(e){e} ) #> <simpleError in matsindf_apply_types(.dat, FUN, ...): In matsindf::matsindf_apply(), the following unused arguments appeared in ...: z> tryCatch(   matsindf_apply(FUN = example_fun, a = 2),   error = function(e){e} ) #> Warning in matsindf_apply_types(.dat, FUN, ...): In matsindf::matsindf_apply(), #> the following named arguments to FUN were not found in any of .dat, ..., or #> defaults to FUN: b. Set .warn_missing_FUN_args = FALSE to suppress this warning #> if you know what you are doing. #> <simpleError in (function (a, b) {    return(list(c = matsbyname::sum_byname(a, b), d = matsbyname::difference_byname(a,         b)))})(a = 2): argument \"b\" is missing, with no default> matsindf_apply(list(a = 2, b = 1), FUN = example_fun) #> $a #> [1] 2 #>  #> $b #> [1] 1 #>  #> $c #> [1] 3 #>  #> $d #> [1] 1 matsindf_apply(list(a = 2, b = 1, z = 42), FUN = example_fun) #> $a #> [1] 2 #>  #> $b #> [1] 1 #>  #> $c #> [1] 3 #>  #> $d #> [1] 1"},{"path":"https://matthewheun.github.io/matsindf/articles/midf_apply_primer.html","id":"some-details","dir":"Articles","previous_headings":"","what":"Some details","title":"A matsindf_apply primer","text":"named argument supplied .dat ..., argument ... takes precedence, overriding argument .dat. supplying .dat ..., ... can contain named strings length 1 interpreted mappings named items .dat arguments signature FUN. example , = \"z\" indicates argument FUN supplied item z .dat. named argument appears .dat output FUN, name collision occurs output matsindf_apply(), warning issued. FUN can accept just numerics. example_fun_with_string() accepts character string numeric. However, ... argument character string length 1 special meaning (namely mapping variables .dat arguments FUN), passing character string length 1 can cause error. get around problem, wrap single string list, shown .","code":"matsindf_apply(list(a = 2, b = 1), FUN = example_fun, a = 10) #> $a #> [1] 10 #>  #> $b #> [1] 1 #>  #> $c #> [1] 11 #>  #> $d #> [1] 9 matsindf_apply(list(a = 2, b = 1, z = 42),                FUN = example_fun, a = \"z\") #> $a #> [1] 2 #>  #> $b #> [1] 1 #>  #> $z #> [1] 42 #>  #> $c #> [1] 43 #>  #> $d #> [1] 41 tryCatch(   matsindf_apply(list(a = 2, b = 1, c = 42), FUN = example_fun),   warning = function(w){w} ) #> <simpleWarning in matsindf_apply(list(a = 2, b = 1, c = 42), FUN = example_fun): Name collision in matsindf::matsindf_apply(). The following arguments appear both in .dat and in the output of `FUN`: c> example_fun_with_string <- function(str_a, b) {   a <- as.numeric(str_a)   list(added = matsbyname::sum_byname(a, b), subtracted = matsbyname::difference_byname(a, b)) }  # Causes an error tryCatch(   matsindf_apply(FUN = example_fun_with_string, str_a = \"1\", b = 2),   error = function(e){e} ) #> Warning in matsindf_apply_types(.dat, FUN, ...): In matsindf::matsindf_apply(), #> the following named arguments to FUN were not found in any of .dat, ..., or #> defaults to FUN: str_a. Set .warn_missing_FUN_args = FALSE to suppress this #> warning if you know what you are doing. #> <simpleError in (function (str_a, b) {    a <- as.numeric(str_a)    list(added = matsbyname::sum_byname(a, b), subtracted = matsbyname::difference_byname(a,         b))})(b = 2): argument \"str_a\" is missing, with no default> # To solve the problem, wrap \"1\" in list(). matsindf_apply(FUN = example_fun_with_string, str_a = list(\"1\"), b = 2) #> $added #> [1] 3 #>  #> $subtracted #> [1] -1 matsindf_apply(FUN = example_fun_with_string, str_a = list(\"1\"), b = list(2)) #> $added #> [1] 3 #>  #> $subtracted #> [1] -1 matsindf_apply(FUN = example_fun_with_string,                 str_a = list(\"1\", \"3\"),                 b = list(2, 4)) #> $added #> $added[[1]] #> [1] 3 #>  #> $added[[2]] #> [1] 7 #>  #>  #> $subtracted #> $subtracted[[1]] #> [1] -1 #>  #> $subtracted[[2]] #> [1] -1 matsindf_apply(.dat = list(str_a = list(\"1\"), b = list(2)), FUN = example_fun_with_string) #> $str_a #> [1] \"1\" #>  #> $b #> [1] 2 #>  #> $added #> [1] 3 #>  #> $subtracted #> [1] -1 matsindf_apply(.dat = list(m = list(\"1\"), n = list(2)), FUN = example_fun_with_string,                 str_a = \"m\", b = \"n\") #> $m #> [1] \"1\" #>  #> $n #> [1] 2 #>  #> $added #> [1] 3 #>  #> $subtracted #> [1] -1"},{"path":"https://matthewheun.github.io/matsindf/articles/midf_apply_primer.html","id":"matsindf_apply-and-data-frames","dir":"Articles","previous_headings":"","what":"matsindf_apply() and data frames","title":"A matsindf_apply primer","text":".dat can also contain data frame (tibble), fancy lists. .dat data frame tibble, output matsindf_apply() tibble, FUN acts like specialized dplyr::mutate(), adding new columns right .dat. Additional niceties available .dat data frame tibble. matsindf_apply() works data frame filled single numeric values, typical. matsindf_apply() also works matsindf data frames, data frames cell data frame filled single matrix. demonstrate use matsindf_apply() matsindf data frame, ’ll construct simple matsindf data frame (midf) using functions package. midf hand, can demonstrate use tidyverse-style functional programming perform matrix algebra within data frame. functions matsbyname package (difference_byname() ) can used purpose. way performing matrix calculations works equally well within 2-row matsindf data frame (shown ) within 1000-row matsindf data frame.","code":"matsindf_apply(.dat = data.frame(str_a = c(\"1\", \"3\"), b = c(2, 4)),                 FUN = example_fun_with_string) #> # A tibble: 2 × 4 #>   str_a     b added subtracted #>   <chr> <dbl> <dbl>      <dbl> #> 1 1         2     3         -1 #> 2 3         4     7         -1 matsindf_apply(.dat = data.frame(str_a = c(\"1\", \"3\"), b = c(2, 4)),                 FUN = example_fun_with_string,                 str_a = \"str_a\", b = \"b\") #> # A tibble: 2 × 4 #>   str_a     b added subtracted #>   <chr> <dbl> <dbl>      <dbl> #> 1 1         2     3         -1 #> 2 3         4     7         -1 matsindf_apply(.dat = data.frame(m = c(\"1\", \"3\"), n = c(2, 4)),                 FUN = example_fun_with_string,                 str_a = \"m\", b = \"n\") #> # A tibble: 2 × 4 #>   m         n added subtracted #>   <chr> <dbl> <dbl>      <dbl> #> 1 1         2     3         -1 #> 2 3         4     7         -1 df <- data.frame(a = 2:4, b = 1:3) matsindf_apply(df, FUN = example_fun) #> # A tibble: 3 × 4 #>       a     b     c     d #>   <int> <int> <int> <int> #> 1     2     1     3     1 #> 2     3     2     5     1 #> 3     4     3     7     1 # Create a tidy data frame containing data for matrices tidy <- tibble::tibble(Year = rep(c(rep(2017, 4), rep(2018, 4)), 2),                        matnames = c(rep(\"U\", 8), rep(\"V\", 8)),                        matvals = c(1:4, 11:14, 21:24, 31:34),                        rownames = c(rep(c(rep(\"p1\", 2), rep(\"p2\", 2)), 2),                                      rep(c(rep(\"i1\", 2), rep(\"i2\", 2)), 2)),                        colnames = c(rep(c(\"i1\", \"i2\"), 4),                                      rep(c(\"p1\", \"p2\"), 4))) |>   dplyr::mutate(     rowtypes = case_when(       matnames == \"U\" ~ \"Product\",       matnames == \"V\" ~ \"Industry\",        TRUE ~ NA_character_     ),     coltypes = case_when(       matnames == \"U\" ~ \"Industry\",       matnames == \"V\" ~ \"Product\",       TRUE ~ NA_character_     )   )  tidy #> # A tibble: 16 × 7 #>     Year matnames matvals rownames colnames rowtypes coltypes #>    <dbl> <chr>      <int> <chr>    <chr>    <chr>    <chr>    #>  1  2017 U              1 p1       i1       Product  Industry #>  2  2017 U              2 p1       i2       Product  Industry #>  3  2017 U              3 p2       i1       Product  Industry #>  4  2017 U              4 p2       i2       Product  Industry #>  5  2018 U             11 p1       i1       Product  Industry #>  6  2018 U             12 p1       i2       Product  Industry #>  7  2018 U             13 p2       i1       Product  Industry #>  8  2018 U             14 p2       i2       Product  Industry #>  9  2017 V             21 i1       p1       Industry Product  #> 10  2017 V             22 i1       p2       Industry Product  #> 11  2017 V             23 i2       p1       Industry Product  #> 12  2017 V             24 i2       p2       Industry Product  #> 13  2018 V             31 i1       p1       Industry Product  #> 14  2018 V             32 i1       p2       Industry Product  #> 15  2018 V             33 i2       p1       Industry Product  #> 16  2018 V             34 i2       p2       Industry Product  # Convert to a matsindf data frame midf <- tidy |>     dplyr::group_by(Year, matnames) |>    collapse_to_matrices(rowtypes = \"rowtypes\", coltypes = \"coltypes\") |>    tidyr::pivot_wider(names_from = \"matnames\", values_from = \"matvals\")  # Take a look at the midf data frame and some of the matrices it contains. midf #> # A tibble: 2 × 3 #>    Year U             V             #>   <dbl> <list>        <list>        #> 1  2017 <dbl [2 × 2]> <dbl [2 × 2]> #> 2  2018 <dbl [2 × 2]> <dbl [2 × 2]> midf$U[[1]] #>    i1 i2 #> p1  1  2 #> p2  3  4 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" midf$V[[1]] #>    p1 p2 #> i1 21 22 #> i2 23 24 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\" result <- midf |>    dplyr::mutate(     W = difference_byname(transpose_byname(V), U)   ) result #> # A tibble: 2 × 4 #>    Year U             V             W             #>   <dbl> <list>        <list>        <list>        #> 1  2017 <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> #> 2  2018 <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> result$W[[1]] #>    i1 i2 #> p1 20 21 #> p2 19 20 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" result$W[[2]] #>    i1 i2 #> p1 20 21 #> p2 19 20 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\""},{"path":"https://matthewheun.github.io/matsindf/articles/midf_apply_primer.html","id":"programming-with-matsindf_apply","dir":"Articles","previous_headings":"","what":"Programming with matsindf_apply()","title":"A matsindf_apply primer","text":"Users can write functions using matsindf_apply(). flexible calc_W() function can written follows. style writing matsindf_apply() functions incredibly versatile, leveraging capabilities matsindf matsbyname packages. (Indeed, Recca package uses matsindf_apply() heavily built upon functions matsindf matsbyname packages.) Functions written like calc_W() can operate ways similar matsindf_apply() . demonstrate, ’ll use calc_W() ways matsindf_apply() can used, going reverse order demonstration capabilities matsindf_apply() . calc_W() can used specialized mutate function operates matsindf data frames. added column given different name default (“W”) using W argument. matsindf_apply(), column names midf can mapped arguments calc_W() arguments calc_W(). calc_W() can operate lists single matrices, . approach works, default values U V arguments calc_W() “U” “V”, respectively. input list members (case midf$U[[1]] midf$V[[1]]) returned output, list(U = midf$U[[1]], V = midf$V[[1]]) passed .dat argument matsindf_apply(). may clearer name arguments required calc_W() function without wrapping list first, shown . approach, input matrices returned output, arguments U V passed ... argument matsindf_apply(), .dat argument matsindf_apply(). calc_W() can operate data frames containing single numbers. Finally, calc_W() can applied single numbers, result 1x1 matrix. good practice write internal functions tolerate zero-length inputs, calc_W() . , enables results different calculations rbinded together.","code":"calc_W <- function(.DF = NULL, U = \"U\", V = \"V\", W = \"W\") {   # The inner function does all the work.   W_func <- function(U_mat, V_mat){     # When we get here, U_mat and V_mat will be single matrices or single numbers,      # not a column in a data frame or an item in a list.     if (length(U_mat) == 0 & length(V_mat == 0)) {       # Tolerate zero-length arguments by returning a zero-length       # a list with the correct name and return type.       return(list(numeric()) |> magrittr::setnames(W))     }     # Calculate W_mat from the inputs U_mat and V_mat.     W_mat <- matsbyname::difference_byname(       matsbyname::transpose_byname(V_mat),        U_mat)     # Return a named list.     list(W_mat) |> magrittr::set_names(W)   }   # The body of the main function consists of a call to matsindf_apply   # that specifies the inner function in the FUN argument.   matsindf_apply(.DF, FUN = W_func, U_mat = U, V_mat = V) } midf |> calc_W() #> # A tibble: 2 × 4 #>    Year U             V             W             #>   <dbl> <list>        <list>        <list>        #> 1  2017 <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> #> 2  2018 <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> midf |> calc_W(W = \"W_prime\") #> # A tibble: 2 × 4 #>    Year U             V             W_prime       #>   <dbl> <list>        <list>        <list>        #> 1  2017 <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> #> 2  2018 <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> midf |>    dplyr::rename(X = U, Y = V) |>    calc_W(U = \"X\", V = \"Y\") #> # A tibble: 2 × 4 #>    Year X             Y             W             #>   <dbl> <list>        <list>        <list>        #> 1  2017 <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> #> 2  2018 <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> calc_W(list(U = midf$U[[1]], V = midf$V[[1]])) #> $U #>    i1 i2 #> p1  1  2 #> p2  3  4 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" #>  #> $V #>    p1 p2 #> i1 21 22 #> i2 23 24 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\" #>  #> $W #>    i1 i2 #> p1 20 21 #> p2 19 20 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" calc_W(U = midf$U[[1]], V = midf$V[[1]]) #> $W #>    i1 i2 #> p1 20 21 #> p2 19 20 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" data.frame(U = c(1, 2), V = c(3, 4)) |> calc_W() #> # A tibble: 2 × 3 #>       U     V     W #>   <dbl> <dbl> <dbl> #> 1     1     3     2 #> 2     2     4     2 calc_W(U = 2, V = 3) #> $W #> [1] 1 calc_W(U = numeric(), V = numeric()) #> $W #> numeric(0) calc_W(list(U = numeric(), V = numeric())) #> $U #> numeric(0) #>  #> $V #> numeric(0) #>  #> $W #> numeric(0)  res <- calc_W(list(U = c(2, 3, 4, 5), V = c(3, 4, 5, 6))) res0 <- calc_W(list(U = numeric(), V = numeric())) dplyr::bind_rows(res, res0) #> # A tibble: 4 × 3 #>       U     V     W #>   <dbl> <dbl> <dbl> #> 1     2     3     1 #> 2     3     4     1 #> 3     4     5     1 #> 4     5     6     1"},{"path":"https://matthewheun.github.io/matsindf/articles/midf_apply_primer.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"A matsindf_apply primer","text":"vignette demonstrated use versatile matsindf_apply() function. Inputs matsindf_apply() can single numbers, matrices, data frames appropriately-named columns. matsindf_apply() can used programming, functions constructed demonstrated share characteristics matsindf_apply(): can used specialized dplyr::mutate() operators, can applied single numbers, matrices, data frames appropriately-named columns.","code":""},{"path":"https://matthewheun.github.io/matsindf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Heun. Author, maintainer.","code":""},{"path":"https://matthewheun.github.io/matsindf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matthew Kuperus Heun (2023). matsindf: Matrices Data Frames R package version 0.4.7 https://doi.org/10.5281/zenodo.5475443","code":"@Manual{,   title = {{matsindf}: Matrices in Data Frames},   author = {Matthew Kuperus Heun},   year = {2023},   note = {R package version 0.4.7},   url = {https://doi.org/10.5281/zenodo.5475443}, }"},{"path":[]},{"path":"https://matthewheun.github.io/matsindf/index.html","id":"statement-of-need","dir":"","previous_headings":"","what":"Statement of need","title":"Matrices in Data Frames","text":"Matrices important mathematical objects, often describe networks flows among nodes. power matrices lies ability organize network-wide calculations, thereby simplifying work analysts study entire systems. wouldn’t nice easy way create R data frames whose entries numbers entire matrices? possible, matrix algebra performed columns similar matrices. ’s reason matsindf. provides functions convert suitably-formatted tidy data frame data frame containing column matrices. Furthermore, matsbyname sister package provides matrix algebra functions respect names matrix rows columns (dimnames R) free analyst task aligning rows columns operands (matrices) passed matrix algebra functions allows matrix algebra conducted within data frames using dplyr, tidyr, tidyverse functions. used together, matsindf matsbyname allow analysts wield simultaneously power matrix mathematics tidyverse functional programming.","code":""},{"path":"https://matthewheun.github.io/matsindf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Matrices in Data Frames","text":"can install matsindf CRAN : can install recent development version matsindf github :","code":"install.packages(\"matsindf\") # install devtools if not already installed # install.packages(\"devtools\") devtools::install_github(\"MatthewHeun/matsindf\") # To build vignettes locally, use devtools::install_github(\"MatthewHeun/matsindf\", build_vignettes = TRUE)"},{"path":"https://matthewheun.github.io/matsindf/index.html","id":"history","dir":"","previous_headings":"","what":"History","title":"Matrices in Data Frames","text":"functions package used Heun et al. (2018).","code":""},{"path":"https://matthewheun.github.io/matsindf/index.html","id":"more-information","dir":"","previous_headings":"","what":"More Information","title":"Matrices in Data Frames","text":"Find information, including vignettes function documentation, https://MatthewHeun.github.io/matsindf/.","code":""},{"path":[]},{"path":"https://matthewheun.github.io/matsindf/reference/UKEnergy2000.html","id":null,"dir":"Reference","previous_headings":"","what":"Energy consumption in the UK in 2000 — UKEnergy2000","title":"Energy consumption in the UK in 2000 — UKEnergy2000","text":"dataset containing approximations energy flows UK year 2000. data first appeared example Figures 3, 7, 11 M.K. Heun, . Owen, P.E. Brockway. 2018. physical supply-use table framework energy analysis energy conversion chain. Applied Energy, Vol. 226, pp. 1134-1162.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/UKEnergy2000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Energy consumption in the UK in 2000 — UKEnergy2000","text":"","code":"UKEnergy2000"},{"path":"https://matthewheun.github.io/matsindf/reference/UKEnergy2000.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Energy consumption in the UK in 2000 — UKEnergy2000","text":"data frame 36 rows 7 variables: Country country, GB (Great Britain, one country) Year year, 2000 (one year) Ledger.side Supply Consumption Flow.aggregation.point tells row aggregated Flow Industry Sector involved flow Product energy product involved flow E.ktoe magnitude energy flow ktoe","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/UKEnergy2000.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Energy consumption in the UK in 2000 — UKEnergy2000","text":"doi:10.1016/j.apenergy.2018.05.109","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/add_UKEnergy2000_matnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column of matrix names to tidy data frame — add_UKEnergy2000_matnames","title":"Add a column of matrix names to tidy data frame — add_UKEnergy2000_matnames","text":"Add column matrix names tidy data frame","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/add_UKEnergy2000_matnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column of matrix names to tidy data frame — add_UKEnergy2000_matnames","text":"","code":"add_UKEnergy2000_matnames(   .DF,   ledger_side_colname = \"Ledger.side\",   energy_colname = \"E.ktoe\",   supply_side = \"Supply\",   consumption_side = \"Consumption\",   matname_colname = \"matname\",   U_name = \"U\",   V_name = \"V\",   Y_name = \"Y\" )"},{"path":"https://matthewheun.github.io/matsindf/reference/add_UKEnergy2000_matnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a column of matrix names to tidy data frame — add_UKEnergy2000_matnames","text":".DF data frame ledger_side_colname energy_colname. ledger_side_colname name column .DF contains ledger side (string). Default \"Ledger.side\". energy_colname name column .DF contains energy values (string). Default \"E.ktoe\". supply_side identifier items supply side ledger (string). Default \"Supply\". consumption_side identifier items consumption side ledger (string). Default \"Consumption\". matname_colname name output column containing name matrix row belongs (string). Default \"UVY\". U_name name use matrix (string). Default \"U\". V_name name make matrix (string). Default \"V\". Y_name name final demand matrix (string). Default \"Y\".","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/add_UKEnergy2000_matnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column of matrix names to tidy data frame — add_UKEnergy2000_matnames","text":".DF added column, UVY_colname.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/add_UKEnergy2000_matnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a column of matrix names to tidy data frame — add_UKEnergy2000_matnames","text":"","code":"matsindf:::add_UKEnergy2000_matnames(UKEnergy2000) #>    Country Year Ledger.side      Flow.aggregation.point              Flow #> 1       GB 2000      Supply Total primary energy supply Resources - Crude #> 2       GB 2000      Supply Total primary energy supply    Resources - NG #> 3       GB 2000      Supply    Transformation processes Gas wells & proc. #> 4       GB 2000      Supply    Transformation processes        Oil fields #> 5       GB 2000      Supply    Transformation processes       Crude dist. #> 6       GB 2000      Supply    Transformation processes          NG dist. #> 7       GB 2000      Supply    Transformation processes    Oil refineries #> 8       GB 2000      Supply    Transformation processes    Oil refineries #> 9       GB 2000      Supply    Transformation processes      Power plants #> 10      GB 2000      Supply    Transformation processes       Elect. grid #> 11      GB 2000      Supply    Transformation processes      Diesel dist. #> 12      GB 2000      Supply    Transformation processes      Petrol dist. #> 13      GB 2000      Supply    Transformation processes        Oil fields #> 14      GB 2000      Supply    Transformation processes       Crude dist. #> 15      GB 2000      Supply    Transformation processes    Oil refineries #> 16      GB 2000      Supply    Transformation processes Gas wells & proc. #> 17      GB 2000      Supply    Transformation processes          NG dist. #> 18      GB 2000      Supply    Transformation processes      Power plants #> 19      GB 2000      Supply    Transformation processes      Diesel dist. #> 20      GB 2000      Supply    Transformation processes Gas wells & proc. #> 21      GB 2000      Supply    Transformation processes        Oil fields #> 22      GB 2000      Supply    Transformation processes       Crude dist. #> 23      GB 2000      Supply    Transformation processes          NG dist. #> 24      GB 2000      Supply    Transformation processes      Petrol dist. #> 25      GB 2000      Supply    Transformation processes       Elect. grid #> 26      GB 2000      Supply    Transformation processes Gas wells & proc. #> 27      GB 2000      Supply    Transformation processes        Oil fields #> 28      GB 2000      Supply    Transformation processes       Crude dist. #> 29      GB 2000      Supply    Transformation processes          NG dist. #> 30      GB 2000      Supply    Transformation processes    Oil refineries #> 31      GB 2000      Supply    Transformation processes      Power plants #> 32      GB 2000      Supply    Transformation processes      Petrol dist. #> 33      GB 2000 Consumption                 Residential       Residential #> 34      GB 2000 Consumption                   Transport         Transport #> 35      GB 2000 Consumption                 Residential       Residential #> 36      GB 2000 Consumption                   Transport         Transport #>           Product E.ktoe matname #> 1           Crude  50000       V #> 2              NG  43000       V #> 3      NG - Wells  41000       V #> 4  Crude - Fields  47500       V #> 5   Crude - Dist.  47000       V #> 6      NG - Dist.  41000       V #> 7          Diesel  15500       V #> 8          Petrol  26500       V #> 9           Elect   6400       V #> 10   Elect - Grid   6275       V #> 11 Diesel - Dist.  15150       V #> 12 Petrol - Dist.  26000       V #> 13          Crude -50000       U #> 14 Crude - Fields -47500       U #> 15  Crude - Dist. -47000       U #> 16             NG -43000       U #> 17     NG - Wells -41000       U #> 18     NG - Dist. -16000       U #> 19         Diesel -15500       U #> 20 Diesel - Dist.    -50       U #> 21 Diesel - Dist.    -50       U #> 22 Diesel - Dist.    -25       U #> 23 Diesel - Dist.    -25       U #> 24 Diesel - Dist.   -250       U #> 25          Elect  -6400       U #> 26   Elect - Grid    -25       U #> 27   Elect - Grid    -25       U #> 28   Elect - Grid    -25       U #> 29   Elect - Grid    -25       U #> 30   Elect - Grid    -75       U #> 31   Elect - Grid   -100       U #> 32         Petrol -26500       U #> 33     NG - Dist.  25000       Y #> 34 Diesel - Dist.  14750       Y #> 35   Elect - Grid   6000       Y #> 36 Petrol - Dist.  26000       Y"},{"path":"https://matthewheun.github.io/matsindf/reference/add_UKEnergy2000_row_col_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Add row, column, row type, and column type metadata — add_UKEnergy2000_row_col_meta","title":"Add row, column, row type, and column type metadata — add_UKEnergy2000_row_col_meta","text":"Add row, column, row type, column type metadata","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/add_UKEnergy2000_row_col_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add row, column, row type, and column type metadata — add_UKEnergy2000_row_col_meta","text":"","code":"add_UKEnergy2000_row_col_meta(   .DF,   matname_colname = \"matname\",   U_name = \"U\",   V_name = \"V\",   Y_name = \"Y\",   product_colname = \"Product\",   flow_colname = \"Flow\",   industry_type = \"Industry\",   product_type = \"Product\",   sector_type = \"Sector\",   rowname_colname = \"rowname\",   colname_colname = \"colname\",   rowtype_colname = \"rowtype\",   coltype_colname = \"coltype\" )"},{"path":"https://matthewheun.github.io/matsindf/reference/add_UKEnergy2000_row_col_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add row, column, row type, and column type metadata — add_UKEnergy2000_row_col_meta","text":".DF data frame containing matname_colname. matname_colname name column .DF contains names matrices (string).  Default \"matname\". U_name name use matrices (string). Default \"U\". V_name name make matrices (string). Default \"V\". Y_name name final demand matrices (string). Default \"Y\". product_colname name column .DF Product names found (string). Default \"Product\". flow_colname name column .DF Flow information found (string). Flow column usually contains industries involved flow. Default \"Flow\". industry_type name identifies production industries transformation processes (string). Default \"Industry\". product_type name identifies energy carriers (string). Default \"Product\". sector_type name identifies final demand sectors (string). Default \"Sector\". rowname_colname name output column contains row names matrices (string). Default \"rowname\". colname_colname name output column contains column names matrices (string). Default \"colname\". rowtype_colname name output column contains row types matrices (string). Default \"rowtype\". coltype_colname name output column contains column types matrices (string). Default \"coltype\".","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/add_UKEnergy2000_row_col_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add row, column, row type, and column type metadata — add_UKEnergy2000_row_col_meta","text":".DF additional columns named rowname_colname, colname_colname, rowtype_colname, coltype_colname.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/add_UKEnergy2000_row_col_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add row, column, row type, and column type metadata — add_UKEnergy2000_row_col_meta","text":"","code":"UKEnergy2000 %>%   matsindf:::add_UKEnergy2000_matnames(.) %>%   matsindf:::add_UKEnergy2000_row_col_meta(.) #>    Country Year Ledger.side      Flow.aggregation.point              Flow #> 1       GB 2000      Supply Total primary energy supply Resources - Crude #> 2       GB 2000      Supply Total primary energy supply    Resources - NG #> 3       GB 2000      Supply    Transformation processes Gas wells & proc. #> 4       GB 2000      Supply    Transformation processes        Oil fields #> 5       GB 2000      Supply    Transformation processes       Crude dist. #> 6       GB 2000      Supply    Transformation processes          NG dist. #> 7       GB 2000      Supply    Transformation processes    Oil refineries #> 8       GB 2000      Supply    Transformation processes    Oil refineries #> 9       GB 2000      Supply    Transformation processes      Power plants #> 10      GB 2000      Supply    Transformation processes       Elect. grid #> 11      GB 2000      Supply    Transformation processes      Diesel dist. #> 12      GB 2000      Supply    Transformation processes      Petrol dist. #> 13      GB 2000      Supply    Transformation processes        Oil fields #> 14      GB 2000      Supply    Transformation processes       Crude dist. #> 15      GB 2000      Supply    Transformation processes    Oil refineries #> 16      GB 2000      Supply    Transformation processes Gas wells & proc. #> 17      GB 2000      Supply    Transformation processes          NG dist. #> 18      GB 2000      Supply    Transformation processes      Power plants #> 19      GB 2000      Supply    Transformation processes      Diesel dist. #> 20      GB 2000      Supply    Transformation processes Gas wells & proc. #> 21      GB 2000      Supply    Transformation processes        Oil fields #> 22      GB 2000      Supply    Transformation processes       Crude dist. #> 23      GB 2000      Supply    Transformation processes          NG dist. #> 24      GB 2000      Supply    Transformation processes      Petrol dist. #> 25      GB 2000      Supply    Transformation processes       Elect. grid #> 26      GB 2000      Supply    Transformation processes Gas wells & proc. #> 27      GB 2000      Supply    Transformation processes        Oil fields #> 28      GB 2000      Supply    Transformation processes       Crude dist. #> 29      GB 2000      Supply    Transformation processes          NG dist. #> 30      GB 2000      Supply    Transformation processes    Oil refineries #> 31      GB 2000      Supply    Transformation processes      Power plants #> 32      GB 2000      Supply    Transformation processes      Petrol dist. #> 33      GB 2000 Consumption                 Residential       Residential #> 34      GB 2000 Consumption                   Transport         Transport #> 35      GB 2000 Consumption                 Residential       Residential #> 36      GB 2000 Consumption                   Transport         Transport #>           Product E.ktoe matname           rowname           colname  rowtype #> 1           Crude  50000       V Resources - Crude             Crude Industry #> 2              NG  43000       V    Resources - NG                NG Industry #> 3      NG - Wells  41000       V Gas wells & proc.        NG - Wells Industry #> 4  Crude - Fields  47500       V        Oil fields    Crude - Fields Industry #> 5   Crude - Dist.  47000       V       Crude dist.     Crude - Dist. Industry #> 6      NG - Dist.  41000       V          NG dist.        NG - Dist. Industry #> 7          Diesel  15500       V    Oil refineries            Diesel Industry #> 8          Petrol  26500       V    Oil refineries            Petrol Industry #> 9           Elect   6400       V      Power plants             Elect Industry #> 10   Elect - Grid   6275       V       Elect. grid      Elect - Grid Industry #> 11 Diesel - Dist.  15150       V      Diesel dist.    Diesel - Dist. Industry #> 12 Petrol - Dist.  26000       V      Petrol dist.    Petrol - Dist. Industry #> 13          Crude -50000       U             Crude        Oil fields  Product #> 14 Crude - Fields -47500       U    Crude - Fields       Crude dist.  Product #> 15  Crude - Dist. -47000       U     Crude - Dist.    Oil refineries  Product #> 16             NG -43000       U                NG Gas wells & proc.  Product #> 17     NG - Wells -41000       U        NG - Wells          NG dist.  Product #> 18     NG - Dist. -16000       U        NG - Dist.      Power plants  Product #> 19         Diesel -15500       U            Diesel      Diesel dist.  Product #> 20 Diesel - Dist.    -50       U    Diesel - Dist. Gas wells & proc.  Product #> 21 Diesel - Dist.    -50       U    Diesel - Dist.        Oil fields  Product #> 22 Diesel - Dist.    -25       U    Diesel - Dist.       Crude dist.  Product #> 23 Diesel - Dist.    -25       U    Diesel - Dist.          NG dist.  Product #> 24 Diesel - Dist.   -250       U    Diesel - Dist.      Petrol dist.  Product #> 25          Elect  -6400       U             Elect       Elect. grid  Product #> 26   Elect - Grid    -25       U      Elect - Grid Gas wells & proc.  Product #> 27   Elect - Grid    -25       U      Elect - Grid        Oil fields  Product #> 28   Elect - Grid    -25       U      Elect - Grid       Crude dist.  Product #> 29   Elect - Grid    -25       U      Elect - Grid          NG dist.  Product #> 30   Elect - Grid    -75       U      Elect - Grid    Oil refineries  Product #> 31   Elect - Grid   -100       U      Elect - Grid      Power plants  Product #> 32         Petrol -26500       U            Petrol      Petrol dist.  Product #> 33     NG - Dist.  25000       Y        NG - Dist.       Residential  Product #> 34 Diesel - Dist.  14750       Y    Diesel - Dist.         Transport  Product #> 35   Elect - Grid   6000       Y      Elect - Grid       Residential  Product #> 36 Petrol - Dist.  26000       Y    Petrol - Dist.         Transport  Product #>     coltype #> 1   Product #> 2   Product #> 3   Product #> 4   Product #> 5   Product #> 6   Product #> 7   Product #> 8   Product #> 9   Product #> 10  Product #> 11  Product #> 12  Product #> 13 Industry #> 14 Industry #> 15 Industry #> 16 Industry #> 17 Industry #> 18 Industry #> 19 Industry #> 20 Industry #> 21 Industry #> 22 Industry #> 23 Industry #> 24 Industry #> 25 Industry #> 26 Industry #> 27 Industry #> 28 Industry #> 29 Industry #> 30 Industry #> 31 Industry #> 32 Industry #> 33   Sector #> 34   Sector #> 35   Sector #> 36   Sector"},{"path":"https://matthewheun.github.io/matsindf/reference/build_keep_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a list of arguments to keep — build_keep_args","title":"Build a list of arguments to keep — build_keep_args","text":"process building data frames arguments FUN, need decide arguments keep source, ..., .dat, defaults FUN. function work one place.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/build_keep_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a list of arguments to keep — build_keep_args","text":"","code":"build_keep_args(where_to_find_args)"},{"path":"https://matthewheun.github.io/matsindf/reference/build_keep_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a list of arguments to keep — build_keep_args","text":"where_to_find_args list created where_to_get_args().","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/build_keep_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a list of arguments to keep — build_keep_args","text":"list names .dat, dots, FUN gives items keep source.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/build_matsindf_apply_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame consisting of the input data for matsindf_apply() — build_matsindf_apply_data_frame","title":"Create a data frame consisting of the input data for matsindf_apply() — build_matsindf_apply_data_frame","text":"internal helper function takes types list creates data frame calculations can proceed.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/build_matsindf_apply_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame consisting of the input data for matsindf_apply() — build_matsindf_apply_data_frame","text":"","code":"build_matsindf_apply_data_frame(   .dat = NULL,   FUN,   ...,   types = matsindf_apply_types(.dat, FUN = FUN, ... = ...) )"},{"path":"https://matthewheun.github.io/matsindf/reference/build_matsindf_apply_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame consisting of the input data for matsindf_apply() — build_matsindf_apply_data_frame","text":".dat value .dat argument matsindf_apply(), list data frame. FUN function supplied matsindf_apply(). ... ... argument supplied matsindf_apply(). types types matsindf_apply(). Supply already calculated externally. Default types = matsindf_apply_types(.dat, FUN = FUN, ... = ...).","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/build_matsindf_apply_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame consisting of the input data for matsindf_apply() — build_matsindf_apply_data_frame","text":"data frame (actually, tibble) columns dots, .dat, default values FUN, according precedence rules matsindf_apply().","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/build_matsindf_apply_data_frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a data frame consisting of the input data for matsindf_apply() — build_matsindf_apply_data_frame","text":"function enforces precedence rules matsindf_apply(), namely variables found ... take priority variables found .dat, take priority variables found default values FUN.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/collapse_to_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a ","title":"Collapse a ","text":"\"tidy\" data frame contains information can collapsed matrices, including columns matrix names, row names, column names, row types, column types, values (entries matrices). column names specified strings matnames, rownames, colnames, rowtypes, coltypes, values arguments collapse_to_matrices(), respectively. matsindf-style matrix named rows columns. addition, matsindf-style matrices \"types\" row column information, \"Commodities\", \"Industries\", \"Products\", \"Machines\". row column types matsindf-style matrices stored attributes matrix (rowtype coltype), can accessed functions matsbyname::rowtype() matsbyname::coltype(). Row column types respected propagated various *_byname functions matsbyname package. Use *_byname functions operations matsindf-style matrices. matsindf-style matrices stored column name incoming values column. function similar tidyr::nest(), stores data frames cell data frame. collapse_to_matrices, matrices created. function respects groups, like dplyr::summarise(). (fact, calls function may work properly unless grouping provided. Errors form \"Error: Duplicate identifiers rows ...\" usually fixed grouping .DF prior calling function.) usual approach dplyr::group_by() matnames column columns preserved output. Note execution halted rownames, colnames, rowtypes, coltypes, values grouping variable .DF. rowtypes coltypes rows matrix .DF; execution halted case. tidyr::pivot_wider()ing output matnames may necessary calculations done collapsed matrices. See example.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/collapse_to_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a ","text":"","code":"collapse_to_matrices(   .DF,   matnames = \"matnames\",   matvals = \"matvals\",   rownames = \"rownames\",   colnames = \"colnames\",   rowtypes = if (\"rowtypes\" %in% names(.DF)) \"rowtypes\" else NULL,   coltypes = if (\"coltypes\" %in% names(.DF)) \"coltypes\" else NULL,   matrix.class = lifecycle::deprecated(),   matrix_class = c(\"matrix\", \"Matrix\") )"},{"path":"https://matthewheun.github.io/matsindf/reference/collapse_to_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a ","text":".DF \"tidy\" data frame matnames string identifying column .DF containing matrix names matrices created. Default \"matnames\". matvals string identifying column .DF containing values inserted matrices created. also name column output containing matrices formed data matvals column. Default \"matvals\". rownames string identifying column .DF containing row names matrices created. Default \"rownames\". colnames string identifying column .DF containing column names matrices created. Default \"colnames\". rowtypes optional string identifying column .DF containing type values rows matrices created. Default (\"rowtypes\" %% names(.DF)) \"rowtypes\" else NULL, failure set rowtypes argument give NULL, appropriate. coltypes optional string identifying column .DF containing type values columns matrices created Default (\"coltypes\" %% names(.DF)) \"rowtypes\" else NULL, failure set coltypes argument give NULL, appropriate. matrix.class Use matrix_class instead. matrix_class One \"matrix\" \"Matrix\". \"matrix\" creates base::matrix object matrix() function. \"Matrix\" creates Matrix::Matrix object using matsbyname::Matrix() function. sparse matrix. Default \"matrix\".","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/collapse_to_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse a ","text":"data frame matrices matvals column.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/collapse_to_matrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse a ","text":"Groups preserved output. Note two types matrices can created, matrix Matrix. Matrix advantage representing sparse matrices less memory (disk space). Matrix objects created matsbyname::Matrix().","code":""},{"path":[]},{"path":"https://matthewheun.github.io/matsindf/reference/collapse_to_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse a ","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tidyr) library(tibble) ptype <- \"Products\" itype <- \"Industries\" tidy <- data.frame(Country = c( \"GH\",  \"GH\",  \"GH\",  \"GH\",  \"GH\",  \"GH\",  \"GH\",                                 \"US\",  \"US\",  \"US\",  \"US\", \"GH\", \"US\"),                   Year    = c(  1971,  1971,  1971,  1971,  1971,  1971,  1971,                                 1980,  1980,  1980,  1980, 1971, 1980),                   matrix  = c(   \"U\",   \"U\",   \"E\",   \"E\",   \"E\",   \"V\",   \"V\",                                  \"U\",   \"U\",   \"E\",   \"E\", \"eta\", \"eta\"),                   row     = c( \"c 1\", \"c 2\", \"c 1\", \"c 2\", \"c 2\", \"i 1\", \"i 2\",                                \"c 1\", \"c 1\", \"c 1\", \"c 2\", NA, NA),                   col     = c( \"i 1\", \"i 2\", \"i 1\", \"i 2\", \"i 3\", \"c 1\", \"c 2\",                                \"i 1\", \"i 2\", \"i 1\", \"i 2\", NA, NA),                   rowtypes = c( ptype, ptype, ptype, ptype, ptype, itype, itype,                                 ptype, ptype, ptype, ptype, NA, NA),                   coltypes = c( itype, itype, itype, itype, itype, ptype, ptype,                                 itype, itype, itype, itype, NA, NA),                   vals  = c(    11  ,  22,    11 ,   22 ,   23 ,   11 ,   22 ,                                 11 ,   12 ,   11 ,   22,   0.2, 0.3) ) %>% group_by(Country, Year, matrix) mats <- collapse_to_matrices(tidy, matnames = \"matrix\", matvals = \"vals\",                              rownames = \"row\", colnames = \"col\",                              rowtypes = \"rowtypes\", coltypes = \"coltypes\") mats %>% pivot_wider(names_from = matrix, values_from = vals) #> # A tibble: 2 × 6 #>   Country  Year E             U             V             eta       #>   <chr>   <dbl> <list>        <list>        <list>        <list>    #> 1 GH       1971 <dbl [2 × 3]> <dbl [2 × 2]> <dbl [2 × 2]> <dbl [1]> #> 2 US       1980 <dbl [2 × 2]> <dbl [1 × 2]> <NULL>        <dbl [1]>"},{"path":"https://matthewheun.github.io/matsindf/reference/data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data pronoun — .data","title":"Data pronoun — .data","text":"See rlang::.data details.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data pronoun — .data","text":"","code":".data"},{"path":"https://matthewheun.github.io/matsindf/reference/df_to_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a message from a data frame — df_to_msg","title":"Create a message from a data frame — df_to_msg","text":"function especially helpful cases data frame missing unset values hand. Trim unneeded columns, call function create string rows separated semicolons entries separated commas.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/df_to_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a message from a data frame — df_to_msg","text":"","code":"df_to_msg(df)"},{"path":"https://matthewheun.github.io/matsindf/reference/df_to_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a message from a data frame — df_to_msg","text":"df data frame converted message","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/df_to_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a message from a data frame — df_to_msg","text":"string rows separated semicolons entries separated commas.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/df_to_msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a message from a data frame — df_to_msg","text":"","code":"data.frame(a = c(1, 2, 3), b = c(\"a\", \"b\", \"c\")) |>   df_to_msg() #> [1] \"a, b\\n====\\n1, a\\n2, b\\n3, c\""},{"path":"https://matthewheun.github.io/matsindf/reference/everything_except.html","id":null,"dir":"Reference","previous_headings":"","what":"Get symbols for all columns except ... — everything_except","title":"Get symbols for all columns except ... — everything_except","text":"convenience function performs set difference columns .DF variable names (symbols) given ....","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/everything_except.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get symbols for all columns except ... — everything_except","text":"","code":"everything_except(.DF, ..., .symbols = TRUE)"},{"path":"https://matthewheun.github.io/matsindf/reference/everything_except.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get symbols for all columns except ... — everything_except","text":".DF data frame whose variable names differenced. ... string, strings, vector strings, list strings representing column names subtracted names .DF/ .symbols boolean defines return type: TRUE symbols, FALSE strings.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/everything_except.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get symbols for all columns except ... — everything_except","text":"vector symbols (.symbols = TRUE) strings (symbol = FALSE) containing variables names except given ....","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/everything_except.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get symbols for all columns except ... — everything_except","text":"","code":"DF <- data.frame(a = c(1, 2), b = c(3, 4), c = c(5, 6)) everything_except(DF, \"a\", \"b\") #> [[1]] #> c #>  everything_except(DF, \"a\", \"b\", symbols = FALSE) #> [[1]] #> c #>  everything_except(DF, c(\"a\", \"b\")) #> [[1]] #> c #>  everything_except(DF, list(\"a\", \"b\")) #> [[1]] #> c #>"},{"path":"https://matthewheun.github.io/matsindf/reference/expand_to_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a matsindf data frame — expand_to_tidy","title":"Expand a matsindf data frame — expand_to_tidy","text":"tidy data frame matrices (row represents one matrix observation) can also represented tidy data frame non-zero matrix entry observation row. function (collapse_to_matrices()) convert two representations.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/expand_to_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a matsindf data frame — expand_to_tidy","text":"","code":"expand_to_tidy(   .DF,   matnames = \"matnames\",   matvals = \"matvals\",   rownames = \"rownames\",   colnames = \"colnames\",   rowtypes = \"rowtypes\",   coltypes = \"coltypes\",   drop = NA )"},{"path":"https://matthewheun.github.io/matsindf/reference/expand_to_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a matsindf data frame — expand_to_tidy","text":".DF data frame containing matsindf-style matrices. (.DF may also named list matrices, case names matrices taken names items list list items expected matrices.) matnames name column .DF containing matrix names (string). Default \"matnames\". matvals name column .DF containing IO-style matrices constants (string), also name column containing matrix entries output data frame. Default \"matvals\". rownames name output column row names (string). Default \"rownames\". colnames name output column column names (string). Default \"colnames\". rowtypes optional name output column row types (string). Default \"rowtypes\". coltypes optional name output column column types (string) Default \"coltypes\". drop specified, value dropped output, example, drop = 0 cause 0 entries matrices deleted output. NA, values dropped output. Default NA.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/expand_to_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand a matsindf data frame — expand_to_tidy","text":"tidy data frame containing expanded matsindf-style matrices","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/expand_to_tidy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expand a matsindf data frame — expand_to_tidy","text":"Names output columns specified rownames, colnames, rowtypes, coltypes, arguments. entries matsindf-style matrices stored output column named values.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/expand_to_tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand a matsindf data frame — expand_to_tidy","text":"","code":"library(dplyr) library(matsbyname) ptype <- \"Products\" itype <- \"Industries\" tidy <- data.frame(Country  = c( \"GH\",  \"GH\",  \"GH\",  \"GH\",  \"GH\",  \"GH\",  \"GH\",                                  \"US\",  \"US\",  \"US\",  \"US\", \"GH\", \"US\"),                   Year      = c( 1971,  1971,  1971,  1971,  1971,  1971,  1971,                                  1980,  1980,  1980,  1980, 1971, 1980),                   matrix    = c(  \"U\",   \"U\",   \"Y\",   \"Y\",   \"Y\",   \"V\",   \"V\",                                   \"U\",   \"U\",   \"Y\",   \"Y\", \"eta\", \"eta\"),                   row       = c(  \"c1\",  \"c2\",  \"c1\",  \"c2\",  \"c2\",  \"i1\",  \"i2\",                                   \"c1\",  \"c1\",  \"c1\",  \"c2\", NA, NA),                   col       = c(  \"i1\",  \"i2\",  \"i1\",  \"i2\",  \"i3\",  \"c1\",  \"c2\",                                   \"i1\",  \"i2\",  \"i1\",  \"i2\", NA, NA),                   rowtypes  = c( ptype, ptype, ptype, ptype, ptype, itype, itype,                                  ptype, ptype, ptype, ptype, NA, NA),                   coltypes  = c(itype, itype, itype, itype, itype, ptype, ptype,                                 itype, itype, itype, itype, NA, NA),                   vals      = c(11  ,  22,    11 ,   22 ,   23 ,   11 ,   22 ,                                 11 ,   12 ,   11 ,   22,   0.2, 0.3)) %>%   group_by(Country, Year, matrix) mats <- collapse_to_matrices(tidy, matnames = \"matrix\", rownames = \"row\", colnames = \"col\",                              rowtypes = \"rowtypes\", coltypes = \"coltypes\",                              matvals = \"vals\") %>%   ungroup() expand_to_tidy(mats, matnames = \"matrix\", matvals = \"vals\",                      rownames = \"rows\", colnames = \"cols\",                      rowtypes = \"rt\",   coltypes = \"ct\") #> # A tibble: 22 × 8 #>    Country  Year matrix rows  cols   vals rt         ct         #>    <chr>   <dbl> <chr>  <chr> <chr> <dbl> <chr>      <chr>      #>  1 GH       1971 U      c1    i1       11 Products   Industries #>  2 GH       1971 U      c2    i1        0 Products   Industries #>  3 GH       1971 U      c1    i2        0 Products   Industries #>  4 GH       1971 U      c2    i2       22 Products   Industries #>  5 GH       1971 V      i1    c1       11 Industries Products   #>  6 GH       1971 V      i2    c1        0 Industries Products   #>  7 GH       1971 V      i1    c2        0 Industries Products   #>  8 GH       1971 V      i2    c2       22 Industries Products   #>  9 GH       1971 Y      c1    i1       11 Products   Industries #> 10 GH       1971 Y      c2    i1        0 Products   Industries #> # ℹ 12 more rows expand_to_tidy(mats, matnames = \"matrix\", matvals = \"vals\",                      rownames = \"rows\", colnames = \"cols\",                      rowtypes = \"rt\",   coltypes = \"ct\", drop = 0) #> # A tibble: 13 × 8 #>    Country  Year matrix rows  cols   vals rt         ct         #>    <chr>   <dbl> <chr>  <chr> <chr> <dbl> <chr>      <chr>      #>  1 GH       1971 U      c1    i1     11   Products   Industries #>  2 GH       1971 U      c2    i2     22   Products   Industries #>  3 GH       1971 V      i1    c1     11   Industries Products   #>  4 GH       1971 V      i2    c2     22   Industries Products   #>  5 GH       1971 Y      c1    i1     11   Products   Industries #>  6 GH       1971 Y      c2    i2     22   Products   Industries #>  7 GH       1971 Y      c2    i3     23   Products   Industries #>  8 GH       1971 eta    NA    NA      0.2 NA         NA         #>  9 US       1980 U      c1    i1     11   Products   Industries #> 10 US       1980 U      c1    i2     12   Products   Industries #> 11 US       1980 Y      c1    i1     11   Products   Industries #> 12 US       1980 Y      c2    i2     22   Products   Industries #> 13 US       1980 eta    NA    NA      0.3 NA         NA"},{"path":"https://matthewheun.github.io/matsindf/reference/get_useable_default_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a usable list of default arguments to a function — get_useable_default_args","title":"Create a usable list of default arguments to a function — get_useable_default_args","text":"formals(FUN) handle arguments without default well, returning name vector length 1, converted character \"\". function detects condition replaces -default argument value .no_default, default NULL.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/get_useable_default_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a usable list of default arguments to a function — get_useable_default_args","text":"","code":"get_useable_default_args(FUN, which = c(\"values\", \"names\"), no_default = NULL)"},{"path":"https://matthewheun.github.io/matsindf/reference/get_useable_default_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a usable list of default arguments to a function — get_useable_default_args","text":"FUN function values default arguments extracted. Tells whether get \"names\" arguments \"values\" arguments. Default \"values\". no_default placeholder value arguments default.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/get_useable_default_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a usable list of default arguments to a function — get_useable_default_args","text":"named list default arguments FUN. Names argument names. Values default argument values.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/get_useable_default_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a usable list of default arguments to a function — get_useable_default_args","text":"","code":"f <- function(a = 42, b) {   return(a + b) } matsindf:::get_useable_default_args(f) #> $a #> [1] 42 #>  matsindf:::get_useable_default_args(f, no_default = logical()) #> $a #> [1] 42 #>"},{"path":"https://matthewheun.github.io/matsindf/reference/group_by_everything_except.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by all variables except some — group_by_everything_except","title":"Group by all variables except some — group_by_everything_except","text":"convenience function allows grouping data frame variables (columns) except variables specified ....","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/group_by_everything_except.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by all variables except some — group_by_everything_except","text":"","code":"group_by_everything_except(.DF, ..., .add = FALSE, .drop = FALSE)"},{"path":"https://matthewheun.github.io/matsindf/reference/group_by_everything_except.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by all variables except some — group_by_everything_except","text":".DF data frame grouped. ... string, strings, vector strings, list strings representing column names excluded grouping. .add .add = FALSE, default, dplyr::group_by() override existing groups. add existing groups, use .add = TRUE. .drop .drop = TRUE, empty groups dropped. Default FALSE.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/group_by_everything_except.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group by all variables except some — group_by_everything_except","text":"grouped version .DF.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/group_by_everything_except.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group by all variables except some — group_by_everything_except","text":"","code":"library(dplyr) DF <- data.frame(a = c(1, 2), b = c(3, 4), c = c(5, 6)) group_by_everything_except(DF) %>% group_vars() #> [1] \"a\" \"b\" \"c\" group_by_everything_except(DF, NULL) %>% group_vars() #> [1] \"a\" \"b\" \"c\" group_by_everything_except(DF, c()) %>% group_vars() #> [1] \"a\" \"b\" \"c\" group_by_everything_except(DF, list()) %>% group_vars() #> [1] \"a\" \"b\" \"c\" group_by_everything_except(DF, c) %>% group_vars() #> [1] \"a\" \"b\" \"c\" group_by_everything_except(DF, \"a\") %>% group_vars() #> [1] \"b\" \"c\" group_by_everything_except(DF, \"c\") %>% group_vars() #> [1] \"a\" \"b\" group_by_everything_except(DF, c(\"a\", \"c\")) %>% group_vars() #> [1] \"b\" group_by_everything_except(DF, c(\"a\")) %>% group_vars() #> [1] \"b\" \"c\" group_by_everything_except(DF, list(\"a\")) %>% group_vars() #> [1] \"b\" \"c\""},{"path":"https://matthewheun.github.io/matsindf/reference/handle_empty_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Gracefully handle empty data — handle_empty_data","title":"Gracefully handle empty data — handle_empty_data","text":"empty data provided matsindf_apply(), care must take return value. function assembles correct zero-row data frame zero-length lists.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/handle_empty_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gracefully handle empty data — handle_empty_data","text":"","code":"handle_empty_data(.dat = NULL, FUN, DF, types)"},{"path":"https://matthewheun.github.io/matsindf/reference/handle_empty_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gracefully handle empty data — handle_empty_data","text":".dat .dat argument matsindf_apply(). FUN FUN argument matsindf_apply(). DF assembled DF inside matsindf_apply(). types types object assembled inside matsindf_apply().","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/handle_empty_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gracefully handle empty data — handle_empty_data","text":"appropriate return value matsindf_apply(), either zero-length list zero-row data frame.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/handle_null_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Gracefully handle NULL arguments — handle_null_args","title":"Gracefully handle NULL arguments — handle_null_args","text":"NULL passed element .dat ... arguments matsindf_apply(), special care must taken. function helps situations.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/handle_null_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gracefully handle NULL arguments — handle_null_args","text":"","code":"handle_null_args(.arg)"},{"path":"https://matthewheun.github.io/matsindf/reference/handle_null_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gracefully handle NULL arguments — handle_null_args","text":".arg One .dat ... (list) arguments matsindf_apply().","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/handle_null_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gracefully handle NULL arguments — handle_null_args","text":"list representation .arg NULL values handled appropriately.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/index_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Index a column in a data frame by groups relative to an initial year — index_column","title":"Index a column in a data frame by groups relative to an initial year — index_column","text":"function indexes (ratio) variables vars_to_index first time time_var index_time (specified). Groups .DF respected required. Neither var_to_index time_var can grouping variables.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/index_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index a column in a data frame by groups relative to an initial year — index_column","text":"","code":"index_column(   .DF,   var_to_index,   time_var = \"Year\",   index_time = NULL,   indexed_var = paste0(var_to_index, suffix),   suffix = \"_indexed\" )"},{"path":"https://matthewheun.github.io/matsindf/reference/index_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index a column in a data frame by groups relative to an initial year — index_column","text":".DF data frame variables contained var_to_index column name representing variable indexed (string) time_var name column containing time information. Default \"Year\". index_time time data var_to_index indexed. NULL (default), index_time set first time group. indexed_var name indexed variable. Default \"<<var_to_index>>_<<suffix>>\". suffix suffix appended indexed variable. Default \"_indexed\".","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/index_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index a column in a data frame by groups relative to an initial year — index_column","text":"data frame number rows .DF following columns: grouping variables .DF, var_to_index, time_var, one additional column containing indexed var_to_index named value indexed_var.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/index_column.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index a column in a data frame by groups relative to an initial year — index_column","text":"Note function works variable index column numbers column matrices.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/index_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index a column in a data frame by groups relative to an initial year — index_column","text":"","code":"library(dplyr) library(tidyr) DF <- data.frame(Year = c(2000, 2005, 2010), a = c(10, 15, 20), b = c(5, 5.5, 6)) %>%   gather(key = name, value = var, a, b) %>%   group_by(name) index_column(DF, var_to_index = \"var\", time_var = \"Year\", suffix = \"_ratioed\") #> # A tibble: 6 × 4 #> # Groups:   name [2] #>    Year name    var var_ratioed #>   <dbl> <chr> <dbl>       <dbl> #> 1  2000 a      10           1   #> 2  2005 a      15           1.5 #> 3  2010 a      20           2   #> 4  2000 b       5           1   #> 5  2005 b       5.5         1.1 #> 6  2010 b       6           1.2 index_column(DF, var_to_index = \"var\", time_var = \"Year\", indexed_var = \"now.indexed\") #> # A tibble: 6 × 4 #> # Groups:   name [2] #>    Year name    var now.indexed #>   <dbl> <chr> <dbl>       <dbl> #> 1  2000 a      10           1   #> 2  2005 a      15           1.5 #> 3  2010 a      20           2   #> 4  2000 b       5           1   #> 5  2005 b       5.5         1.1 #> 6  2010 b       6           1.2 index_column(DF, var_to_index = \"var\", time_var = \"Year\", index_time = 2005,              indexed_var = \"now.indexed\") #> # A tibble: 6 × 4 #> # Groups:   name [2] #>    Year name    var now.indexed #>   <dbl> <chr> <dbl>       <dbl> #> 1  2000 a      10         0.667 #> 2  2005 a      15         1     #> 3  2010 a      20         1.33  #> 4  2000 b       5         0.909 #> 5  2005 b       5.5       1     #> 6  2010 b       6         1.09  if (FALSE) {   DF %>%     ungroup() %>%     group_by(name, var) %>%     index_column(var_to_index = \"var\", time_var = \"Year\") # Fails! Do not group on var_to_index.   DF %>%     ungroup() %>%     group_by(name, Year) %>%     index_column(var_to_index = \"var\", time_var = \"Year\") # Fails! Do not group on time_var. }"},{"path":"https://matthewheun.github.io/matsindf/reference/mat_to_rowcolval.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a matrix to a data frame with rows, columns, and values. — mat_to_rowcolval","title":"Convert a matrix to a data frame with rows, columns, and values. — mat_to_rowcolval","text":"function \"expands\" matrix tidy data frame values column factors row names, column names, row types, column types. Optionally, values can dropped.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/mat_to_rowcolval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a matrix to a data frame with rows, columns, and values. — mat_to_rowcolval","text":"","code":"mat_to_rowcolval(   .matrix,   matvals = \"matvals\",   rownames = \"rownames\",   colnames = \"colnames\",   rowtypes = \"rowtypes\",   coltypes = \"coltypes\",   drop = NA )"},{"path":"https://matthewheun.github.io/matsindf/reference/mat_to_rowcolval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a matrix to a data frame with rows, columns, and values. — mat_to_rowcolval","text":".matrix IO-style matrix converted data frame rows, columns, values. matvals string name output column containing values. Default \"matvals\". rownames string name output column containing row names. Default \"rownames\". colnames string name output column containing column names. Default \"colnames\". rowtypes string name output column containing row types. Default \"rowtypes\". coltypes string name output column containing column types. Default \"coltypes\". drop specified, value dropped output. Default NA. example, drop = 0 cause 0 entries matrices deleted output. NA, values dropped output.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/mat_to_rowcolval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a matrix to a data frame with rows, columns, and values. — mat_to_rowcolval","text":"data frame rows, columns, values.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/mat_to_rowcolval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a matrix to a data frame with rows, columns, and values. — mat_to_rowcolval","text":"","code":"library(matsbyname) data <- data.frame(Country  = c(\"GH\", \"GH\", \"GH\"),                    rows = c( \"c1\",  \"c1\", \"c2\"),                    cols = c( \"i1\",  \"i2\", \"i2\"),                    rt = c(\"Commodities\", \"Commodities\", \"Commodities\"),                    ct = c(\"Industries\", \"Industries\", \"Industries\"),                    vals = c(  11  ,  12,   22 )) data #>   Country rows cols          rt         ct vals #> 1      GH   c1   i1 Commodities Industries   11 #> 2      GH   c1   i2 Commodities Industries   12 #> 3      GH   c2   i2 Commodities Industries   22 A <- data %>%   rowcolval_to_mat(rownames = \"rows\", colnames = \"cols\",                    rowtypes = \"rt\",   coltypes = \"ct\", matvals = \"vals\") A #>    i1 i2 #> c1 11 12 #> c2  0 22 #> attr(,\"rowtype\") #> [1] \"Commodities\" #> attr(,\"coltype\") #> [1] \"Industries\" mat_to_rowcolval(A, rownames = \"rows\", colnames = \"cols\",                  rowtypes = \"rt\", coltypes = \"ct\", matvals = \"vals\") #>   rows cols vals          rt         ct #> 1   c1   i1   11 Commodities Industries #> 2   c2   i1    0 Commodities Industries #> 3   c1   i2   12 Commodities Industries #> 4   c2   i2   22 Commodities Industries mat_to_rowcolval(A, rownames = \"rows\", colnames = \"cols\",                  rowtypes = \"rt\", coltypes = \"ct\", matvals = \"vals\", drop = 0) #>   rows cols vals          rt         ct #> 1   c1   i1   11 Commodities Industries #> 3   c1   i2   12 Commodities Industries #> 4   c2   i2   22 Commodities Industries # This also works for single values mat_to_rowcolval(2, matvals = \"vals\",                  rownames = \"rows\", colnames = \"cols\",                  rowtypes = \"rt\", coltypes = \"ct\") #>   rows cols vals rt ct #> 1   NA   NA    2 NA NA mat_to_rowcolval(0, matvals = \"vals\",                  rownames = \"rows\", colnames = \"cols\",                  rowtypes = \"rt\", coltypes = \"ct\", drop = 0) #> [1] rows cols vals rt   ct   #> <0 rows> (or 0-length row.names)"},{"path":"https://matthewheun.github.io/matsindf/reference/matrix_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Find columns that contain matrices — matrix_cols","title":"Find columns that contain matrices — matrix_cols","text":"often helpful find columns matsindf data frame contain exclusively matrices. function helps task.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matrix_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find columns that contain matrices — matrix_cols","text":"","code":"matrix_cols(.df, .drop_names = FALSE, .any = FALSE)"},{"path":"https://matthewheun.github.io/matsindf/reference/matrix_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find columns that contain matrices — matrix_cols","text":".df data frame queried matrix columns. .drop_names boolean tells whether remove names returned integer vector. Default FALSE. .boolean tells whether column reported () rows contain matrices (instead () rows contain matrices). Default FALSE, case entries column must matrix column reported.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matrix_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find columns that contain matrices — matrix_cols","text":"vector integers saying columns contain matrices.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matrix_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find columns that contain matrices — matrix_cols","text":"default, column considered matrix column () rows contain matrices. Use .test_any argument modify behavior. default, vector integers returned function named columns. Use .drop_names function modify behavior.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matrix_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find columns that contain matrices — matrix_cols","text":"","code":"tidy <- tibble::tibble(matrix = c(\"V1\", \"V1\", \"V1\", \"V2\", \"V2\"),                          row = c(\"i1\", \"i1\", \"i2\", \"i1\", \"i2\"),                          col = c(\"p1\", \"p2\", \"p2\", \"p1\", \"p2\"),                          vals = c(1, 2, 3, 4, 5)) %>%   dplyr::mutate(     rowtypes = \"Industries\",     coltypes  = \"Products\"   ) %>%   dplyr::group_by(matrix) matsdf <- tidy %>%   collapse_to_matrices(matnames = \"matrix\", matvals = \"vals\",                        rownames = \"row\", colnames = \"col\",                        rowtypes = \"rowtypes\", coltypes = \"coltypes\") matsdf #>   matrix       vals #> 1     V1 1, 0, 2, 3 #> 2     V2 4, 0, 0, 5 matrix_cols(matsdf) #> vals  #>    2  matrix_cols(matsdf, .drop_names = TRUE) #> [1] 2"},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to a matsindf data frame (and more) — matsindf_apply","title":"Apply a function to a matsindf data frame (and more) — matsindf_apply","text":"Applies FUN .dat performs calculation specified FUN numbers matrices. FUN must return named list. values list returned FUN become entries columns returned data frame entries sub-lists returned list. names items list returned FUN become names columns returned data frame names list items returned list.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to a matsindf data frame (and more) — matsindf_apply","text":"","code":"matsindf_apply(.dat = NULL, FUN, ..., .warn_missing_FUN_args = TRUE)"},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to a matsindf data frame (and more) — matsindf_apply","text":".dat list named items data frame. FUN function applied .dat. ... Named arguments passed name FUN. .warn_missing_FUN_args boolean tells whether warn missing arguments FUN. Default TRUE.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to a matsindf data frame (and more) — matsindf_apply","text":"named list data frame. (See details.)","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function to a matsindf data frame (and more) — matsindf_apply","text":".null(.dat) ... named numbers matrices form argname = m, ms passed FUN argnames. return value named list provided FUN. arguments ... included output. .null(.dat) ... lists numbers matrices form argname = l, FUN Mapped across various ls obtain list named lists returned FUN. return value list whose top-level names names returned items FUN .dat included return value. !.null(.dat) ... named, length == 1 character strings form argname = string, argnames expected names arguments FUN, strings expected column names .dat. return value .dat additional columns (right) whose names names list items returned FUN. .dat contains columns whose names columns added right, warning emitted. .dat can list named items case list returned instead data frame. items .dat names arguments FUN, necessary specify arguments .... matsindf_apply assumes appropriately-named items .dat intended arguments FUN. item name appears ... .dat, ... takes precedence. .dat data frame, items columns (possibly matrices) unname()d calling FUN. NULL arguments ... ignored purposes deciding whether arguments numbers, matrices, lists numbers matrices, named character strings. However, NULL arguments passed FUN, FUN able deal NULL arguments appropriately. .dat present, ... contains length == 1 strings, one ... strings name column .dat, FUN called WITHOUT argument whose column missing. .e., argument treated missing. FUN works despite missing argument, execution proceeds. FUN handle missing argument, error occur FUN. suggested FUN able handle empty data gracefully, returning empty result names non-empty data fed FUN. Attempts made handle zero-row data (.dat ...) gracefully. First, FUN called empty (named) data. FUN can handle empty data without error, result returned. FUN errors fed empty data, FUN called empty argument list hopes FUN reasonable default values. fails, .dat returned unmodified (NULL) data ... returned.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to a matsindf data frame (and more) — matsindf_apply","text":"","code":"library(matsbyname) example_fun <- function(a, b){   return(list(c = sum_byname(a, b),               d = difference_byname(a, b))) } # Single values for arguments matsindf_apply(FUN = example_fun, a = 2, b = 2) #> $c #> [1] 4 #>  #> $d #> [1] 0 #>  # Matrices for arguments a <- 2 * matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = TRUE,               dimnames = list(c(\"r1\", \"r2\"), c(\"c1\", \"c2\"))) b <- 0.5 * a matsindf_apply(FUN = example_fun, a = a, b = b) #> $c #>    c1 c2 #> r1  3  6 #> r2  9 12 #>  #> $d #>    c1 c2 #> r1  1  2 #> r2  3  4 #>  # Single values in lists are treated like columns of a data frame matsindf_apply(FUN = example_fun, a = list(2, 2), b = list(1, 2)) #> $c #> $c[[1]] #> [1] 3 #>  #> $c[[2]] #> [1] 4 #>  #>  #> $d #> $d[[1]] #> [1] 1 #>  #> $d[[2]] #> [1] 0 #>  #>  # Matrices in lists are treated like columns of a data frame matsindf_apply(FUN = example_fun, a = list(a, a), b = list(b, b)) #> $c #> $c[[1]] #>    c1 c2 #> r1  3  6 #> r2  9 12 #>  #> $c[[2]] #>    c1 c2 #> r1  3  6 #> r2  9 12 #>  #>  #> $d #> $d[[1]] #>    c1 c2 #> r1  1  2 #> r2  3  4 #>  #> $d[[2]] #>    c1 c2 #> r1  1  2 #> r2  3  4 #>  #>  # Single numbers in a data frame DF <- data.frame(a = c(4, 4, 5), b = c(4, 4, 4)) matsindf_apply(DF, FUN = example_fun, a = \"a\", b = \"b\") #> # A tibble: 3 × 4 #>       a     b     c     d #>   <dbl> <dbl> <dbl> <dbl> #> 1     4     4     8     0 #> 2     4     4     8     0 #> 3     5     4     9     1 # By default, arguments to FUN come from DF matsindf_apply(DF, FUN = example_fun) #> # A tibble: 3 × 4 #>       a     b     c     d #>   <dbl> <dbl> <dbl> <dbl> #> 1     4     4     8     0 #> 2     4     4     8     0 #> 3     5     4     9     1 # Now put some matrices in a data frame. DF2 <- data.frame(a = I(list(a, a)), b = I(list(b,b))) matsindf_apply(DF2, FUN = example_fun, a = \"a\", b = \"b\") #> # A tibble: 2 × 4 #>   a             b             c             d             #>   <I<list>>     <I<list>>     <list>        <list>        #> 1 <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> #> 2 <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> <dbl [2 × 2]> # All arguments to FUN are supplied by named items in .dat matsindf_apply(list(a = 1, b = 2), FUN = example_fun) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 3 #>  #> $d #> [1] -1 #>  # All arguments are supplied by named arguments in ..., but mix them up. # Note that the named arguments override the items in .dat matsindf_apply(list(a = 1, b = 2, z = 10), FUN = example_fun, a = \"z\", b = \"b\") #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $z #> [1] 10 #>  #> $c #> [1] 12 #>  #> $d #> [1] 8 #>  # A warning is issued when an output item has same name as an input item. matsindf_apply(list(a = 1, b = 2, c = 10), FUN = example_fun, a = \"c\", b = \"b\") #> Warning: Name collision in matsindf::matsindf_apply(). The following arguments appear both in .dat and in the output of `FUN`: c #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 10 #>  #> $c #> [1] 12 #>  #> $d #> [1] 8 #>  # When a zero-row data frame supplied to .dat, # .dat is returned unmodified, unless FUN can handle empty data. DF3 <- DF2[0, ] DF3 #> [1] a b #> <0 rows> (or 0-length row.names) matsindf_apply(DF3, FUN = example_fun, a = \"a\", b = \"b\") #> [1] a b #> <0 rows> (or 0-length row.names)"},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine types of .dat and ... arguments for matsindf_apply() — matsindf_apply_types","title":"Determine types of .dat and ... arguments for matsindf_apply() — matsindf_apply_types","text":"convenience function returns list types .dat ... well names .dat ..., components named .dat_null, .dat_df, .dat_list, .dat_names, FUN_arg_all_names, FUN_arg_default_names, FUN_arg_default_values, dots_present, all_dots_num, all_dots_mats, all_dots_list, all_dots_vect, all_dots_char, all_dots_longer_than_1, dots_names, keep_args.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine types of .dat and ... arguments for matsindf_apply() — matsindf_apply_types","text":"","code":"matsindf_apply_types(.dat = NULL, FUN, ..., .warn_missing_FUN_args = TRUE)"},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine types of .dat and ... arguments for matsindf_apply() — matsindf_apply_types","text":".dat .dat argument checked. FUN function sent matsindf_apply(). ... list arguments matsindf_apply() checked. .warn_missing_FUN_args boolean tells whether warn missing arguments FUN. Default TRUE.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine types of .dat and ... arguments for matsindf_apply() — matsindf_apply_types","text":"logical list components named .dat_null, .dat_df, .dat_list, .dat_names, FUN_arg_all_names, FUN_arg_default_names, FUN_arg_default_values, dots_present, all_dots_num, all_dots_mats, all_dots_list, all_dots_vect, all_dots_char, all_dots_longer_than_1, dots_names, keep_args.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply_types.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine types of .dat and ... arguments for matsindf_apply() — matsindf_apply_types","text":".dat data.frame, .dat_list .dat_df TRUE. arguments present ..., dots_present TRUE FALSE otherwise. items ... single numbers, all_dots_num TRUE list members FALSE. items ... matrices, all_dots_mats TRUE list members FALSE. items ... lists, all_dots_list TRUE list members FALSE. items ... vectors (including lists), all_dots_vect TRUE. items ... length > 1, all_dots_longer_than_1 TRUE. items ... character strings, all_dots_char TRUE list members FALSE. various FUN_arg_* components give information arguments FUN. FUN_arg_all_names gives names arguments FUN, regardless whether default values. FUN_arg_default_names gives names arguments default values. FUN_arg_default_values gives values default arguments, already eval()ed global environment. values category, NULL returned. thus, FUN arguments default values assigned signature function, FUN_arg_default_names FUN_arg_default_values NULL. FUN arguments, FUN_arg_all_names, FUN_arg_default_names FUN_arg_default_values NULL. keep_args named list() arguments, indicates arguments keep source (..., .dat, default args FUN) order preference, ... .dat default arguments FUN. Arguments used FUN kept, according rules preference.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/matsindf_apply_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine types of .dat and ... arguments for matsindf_apply() — matsindf_apply_types","text":"","code":"identity_fun <- function(a, b) {list(a = a, b = b)} matsindf_apply_types(.dat = NULL, FUN = identity_fun, a = 1, b = 2) #> $.dat_null #> [1] TRUE #>  #> $.dat_df #> [1] FALSE #>  #> $.dat_list #> [1] FALSE #>  #> $.dat_names #> NULL #>  #> $FUN_arg_all_names #> [1] \"a\" \"b\" #>  #> $FUN_arg_default_names #> NULL #>  #> $FUN_arg_default_values #> NULL #>  #> $dots_present #> [1] TRUE #>  #> $all_dots_num #> [1] TRUE #>  #> $all_dots_mats #> [1] FALSE #>  #> $all_dots_list #> [1] FALSE #>  #> $all_dots_vect #> [1] TRUE #>  #> $all_dots_char #> [1] FALSE #>  #> $all_dots_longer_than_1 #> [1] FALSE #>  #> $dots_names #> [1] \"a\" \"b\" #>  #> $keep_args #> $keep_args$.dat #> NULL #>  #> $keep_args$FUN #> NULL #>  #> $keep_args$dots #>   a   b  #> \"a\" \"b\"  #>  #>  matsindf_apply_types(.dat = data.frame(), FUN = identity_fun,                      a = matrix(c(1, 2)), b = matrix(c(2, 3))) #> $.dat_null #> [1] FALSE #>  #> $.dat_df #> [1] TRUE #>  #> $.dat_list #> [1] TRUE #>  #> $.dat_names #> character(0) #>  #> $FUN_arg_all_names #> [1] \"a\" \"b\" #>  #> $FUN_arg_default_names #> NULL #>  #> $FUN_arg_default_values #> NULL #>  #> $dots_present #> [1] TRUE #>  #> $all_dots_num #> [1] FALSE #>  #> $all_dots_mats #> [1] TRUE #>  #> $all_dots_list #> [1] FALSE #>  #> $all_dots_vect #> [1] FALSE #>  #> $all_dots_char #> [1] FALSE #>  #> $all_dots_longer_than_1 #> [1] FALSE #>  #> $dots_names #> [1] \"a\" \"b\" #>  #> $keep_args #> $keep_args$.dat #> NULL #>  #> $keep_args$FUN #> NULL #>  #> $keep_args$dots #>   a   b  #> \"a\" \"b\"  #>  #>  matsindf_apply_types(.dat = list(), FUN = identity_fun,                      a = c(1, 2), b = c(3, 4)) #> $.dat_null #> [1] FALSE #>  #> $.dat_df #> [1] FALSE #>  #> $.dat_list #> [1] TRUE #>  #> $.dat_names #> NULL #>  #> $FUN_arg_all_names #> [1] \"a\" \"b\" #>  #> $FUN_arg_default_names #> NULL #>  #> $FUN_arg_default_values #> NULL #>  #> $dots_present #> [1] TRUE #>  #> $all_dots_num #> [1] TRUE #>  #> $all_dots_mats #> [1] FALSE #>  #> $all_dots_list #> [1] FALSE #>  #> $all_dots_vect #> [1] TRUE #>  #> $all_dots_char #> [1] FALSE #>  #> $all_dots_longer_than_1 #> [1] TRUE #>  #> $dots_names #> [1] \"a\" \"b\" #>  #> $keep_args #> $keep_args$.dat #> NULL #>  #> $keep_args$FUN #> NULL #>  #> $keep_args$dots #>   a   b  #> \"a\" \"b\"  #>  #>  matsindf_apply_types(.dat = NULL, FUN = identity_fun,                      a = list(1, 2), b = list(3, 4)) #> $.dat_null #> [1] TRUE #>  #> $.dat_df #> [1] FALSE #>  #> $.dat_list #> [1] FALSE #>  #> $.dat_names #> NULL #>  #> $FUN_arg_all_names #> [1] \"a\" \"b\" #>  #> $FUN_arg_default_names #> NULL #>  #> $FUN_arg_default_values #> NULL #>  #> $dots_present #> [1] TRUE #>  #> $all_dots_num #> [1] FALSE #>  #> $all_dots_mats #> [1] FALSE #>  #> $all_dots_list #> [1] TRUE #>  #> $all_dots_vect #> [1] TRUE #>  #> $all_dots_char #> [1] FALSE #>  #> $all_dots_longer_than_1 #> [1] TRUE #>  #> $dots_names #> [1] \"a\" \"b\" #>  #> $keep_args #> $keep_args$.dat #> NULL #>  #> $keep_args$FUN #> NULL #>  #> $keep_args$dots #>   a   b  #> \"a\" \"b\"  #>  #>"},{"path":"https://matthewheun.github.io/matsindf/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See %>% details.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://matthewheun.github.io/matsindf/reference/quasi-quote-assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — :=","title":"Pipe operator — :=","text":"See := details.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/quasi-quote-assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — :=","text":"","code":"x := y"},{"path":"https://matthewheun.github.io/matsindf/reference/rowcolval_to_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a tidy data frame into a matrix with named rows and columns — rowcolval_to_mat","title":"Collapse a tidy data frame into a matrix with named rows and columns — rowcolval_to_mat","text":"Columns specified one rownames, colnames, rowtype, coltype, values silently dropped. rowtypes coltypes added attributes resulting matrix (via matsbyname::setrowtype() matsbyname::setcoltype(). resulting matrix (hood) data frame. rownames colnames columns .DF contain NA, assumed single value, matrix, case value values column returned.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/rowcolval_to_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a tidy data frame into a matrix with named rows and columns — rowcolval_to_mat","text":"","code":"rowcolval_to_mat(   .DF,   matvals = \"matvals\",   rownames = \"rownames\",   colnames = \"colnames\",   rowtypes = \"rowtypes\",   coltypes = \"coltypes\",   fill = 0,   matrix.class = lifecycle::deprecated(),   matrix_class = c(\"matrix\", \"Matrix\") )"},{"path":"https://matthewheun.github.io/matsindf/reference/rowcolval_to_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a tidy data frame into a matrix with named rows and columns — rowcolval_to_mat","text":".DF tidy data frame containing columns row names, column names, values. matvals name column .DF containing values fill matrix (string). Default \"matvals\". rownames name column .DF containing row names (string). Default \"rownames\". colnames name column .DF containing column names (string). Default \"colnames\". rowtypes optional string identifying types information found rows matrix constructed. Default \"rowtypes\". coltypes optional string identifying types information found columns matrix constructed. Default \"coltypes\". fill value missing entries resulting matrix. default 0. matrix.class Use matrix_class instead. matrix_class One \"matrix\" \"Matrix\". \"matrix\" creates base::matrix object matrix() function. \"Matrix\" creates Matrix::Matrix object using matsbyname::Matrix() function. sparse matrix. Default \"matrix\".","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/rowcolval_to_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse a tidy data frame into a matrix with named rows and columns — rowcolval_to_mat","text":"matrix named rows columns , optionally, row column types.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/rowcolval_to_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse a tidy data frame into a matrix with named rows and columns — rowcolval_to_mat","text":"Note two types matrices can created, matrix Matrix. Matrix advantage representing sparse matrices less memory (disk space). Matrix objects created matsbyname::Matrix().","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/rowcolval_to_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse a tidy data frame into a matrix with named rows and columns — rowcolval_to_mat","text":"","code":"library(matsbyname) library(dplyr) data <- data.frame(Country  = c(\"GH\", \"GH\", \"GH\"),                    rows = c( \"c 1\",  \"c 1\", \"c 2\"),                    cols = c( \"i 1\",  \"i 2\", \"i 2\"),                    vals = c(   11  ,   12,    22 )) A <- rowcolval_to_mat(data, rownames = \"rows\", colnames = \"cols\", matvals = \"vals\") A #>     i 1 i 2 #> c 1  11  12 #> c 2   0  22 #> attr(,\"rowtype\") #> [1] \"rowtypes\" #> attr(,\"coltype\") #> [1] \"coltypes\" rowtype(A) # NULL, because types not set #> [1] \"rowtypes\" coltype(A) # NULL, because types not set #> [1] \"coltypes\" B <- rowcolval_to_mat(data, rownames = \"rows\", colnames = \"cols\", matvals = \"vals\",                             rowtypes  = \"Commodities\", coltypes  = \"Industries\") B #>     i 1 i 2 #> c 1  11  12 #> c 2   0  22 #> attr(,\"rowtype\") #> [1] \"Commodities\" #> attr(,\"coltype\") #> [1] \"Industries\" C <- data %>% bind_cols(data.frame(rt = c(\"Commodities\", \"Commodities\", \"Commodities\"),                                    ct = c(\"Industries\", \"Industries\", \"Industries\"))) %>%   rowcolval_to_mat(rownames = \"rows\", colnames = \"cols\", matvals = \"vals\",                    rowtypes = \"rt\", coltypes = \"ct\") C #>     i 1 i 2 #> c 1  11  12 #> c 2   0  22 #> attr(,\"rowtype\") #> [1] \"Commodities\" #> attr(,\"coltype\") #> [1] \"Industries\" # Also works for single values if both the rownames and colnames columns contain NA data2 <- data.frame(Country = c(\"GH\"), rows = c(NA), cols = c(NA),   rowtypes = c(NA), coltypes = c(NA), vals = c(2)) data2 %>% rowcolval_to_mat(rownames = \"rows\", colnames = \"cols\", matvals = \"vals\",   rowtypes = \"rowtypes\", coltypes = \"coltypes\") #> [1] 2 data3 <- data.frame(Country = c(\"GH\"), rows = c(NA), cols = c(NA), vals = c(2)) data3 %>% rowcolval_to_mat(rownames = \"rows\", colnames = \"cols\", matvals = \"vals\") #> [1] 2 # Fails when rowtypes or coltypes not all same. In data3, column rt is not all same. data4 <- data %>% bind_cols(data.frame(rt = c(\"Commodities\", \"Industries\", \"Commodities\"),                                        ct = c(\"Industries\", \"Industries\", \"Industries\"))) if (FALSE) rowcolval_to_mat(data4, rownames = \"rows\", colnames = \"cols\",                           matvals = \"vals\", rowtypes = \"rt\", coltypes = \"ct\")"},{"path":"https://matthewheun.github.io/matsindf/reference/should_unlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Tell whether a column can be unlisted — should_unlist","title":"Tell whether a column can be unlisted — should_unlist","text":"evaluating row data frame matsindf_apply(), result tibble list columns. function tells whether column can unlisted. internal helper function called externally.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/should_unlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tell whether a column can be unlisted — should_unlist","text":"","code":"should_unlist(this_col)"},{"path":"https://matthewheun.github.io/matsindf/reference/should_unlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tell whether a column can be unlisted — should_unlist","text":"this_col column checked. data.frame, case every column checked.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/should_unlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tell whether a column can be unlisted — should_unlist","text":"boolean. TRUE column can unlisted, FALSE otherwise. this_col data.frame, named boolean vector, one entry column.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/verify_cols_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that column names in a data frame are not already present — verify_cols_missing","title":"Verify that column names in a data frame are not already present — verify_cols_missing","text":"Recca package, many functions add columns existing data frame. incoming data frame already contains columns names new columns added, name collision occur, deleting existing column data. function provides way quickly check whether newcols already present .DF.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/verify_cols_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that column names in a data frame are not already present — verify_cols_missing","text":"","code":"verify_cols_missing(.DF, newcols)"},{"path":"https://matthewheun.github.io/matsindf/reference/verify_cols_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that column names in a data frame are not already present — verify_cols_missing","text":".DF data frame newcols added newcols single string, single name, vector strings representing names new columns added .DF, vector names new columns added .DF","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/verify_cols_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify that column names in a data frame are not already present — verify_cols_missing","text":"NULL. function called side effect checking validity names newcols added .DF.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/verify_cols_missing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Verify that column names in a data frame are not already present — verify_cols_missing","text":"function terminates execution column .DF overwritten one newcols.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/verify_cols_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verify that column names in a data frame are not already present — verify_cols_missing","text":"","code":"df <- data.frame(a = c(1,2), b = c(3,4)) verify_cols_missing(df, \"d\") # Silent. There will be no problem adding column \"d\". newcols <- c(\"c\", \"d\", \"a\", \"b\") if (FALSE) verify_cols_missing(df, newcols) # Error: a and b are already in df."},{"path":"https://matthewheun.github.io/matsindf/reference/where_to_get_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Decide where to get each argument to FUN — where_to_get_args","title":"Decide where to get each argument to FUN — where_to_get_args","text":"precedence rules obtain values FUN argument matsindf_apply() codified . rules : Precedence order: ..., .dat, defaults arguments FUN (highest priority lowest priority). element ... character string length 1, element ... provides mapping item .dat (name value character string length 1) argument FUN (name name character string length 1). value character string length 1 name .dat, default arguments FUN checked order. name default argument FUN value string length 1 argument ..., mapping occurs. mapping possible, default arg FUN used directly.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/where_to_get_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decide where to get each argument to FUN — where_to_get_args","text":"","code":"where_to_get_args(.dat = NULL, FUN, ...)"},{"path":"https://matthewheun.github.io/matsindf/reference/where_to_get_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decide where to get each argument to FUN — where_to_get_args","text":".dat .dat argument matsindf_apply(). FUN FUN argument matsindf_apply(). ... ... argument matsindf_apply().","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/where_to_get_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decide where to get each argument to FUN — where_to_get_args","text":"named list wherein names argument names FUN. Values character vectors 2 elements. first element named source provides argument matsindf_apply() named argument found, one \".dat\", \"FUN\", \"...\". second element named arg_name provides variable name argument name source contains input data argument FUN.","code":""},{"path":"https://matthewheun.github.io/matsindf/reference/where_to_get_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decide where to get each argument to FUN — where_to_get_args","text":"","code":"example_fun <- function(a = 1, b) {   list(c = a + b, d = a - b) } # b is not available anywhere, likely causing an error later matsindf:::where_to_get_args(FUN = example_fun) #> $a #>   source arg_name  #>    \"FUN\"      \"a\"  #>  #> $b #> NULL #>  # b is now available in ... matsindf:::where_to_get_args(FUN = example_fun, b = 2) #> $a #>   source arg_name  #>    \"FUN\"      \"a\"  #>  #> $b #>   source arg_name  #>    \"...\"      \"b\"  #>  # b is now available in .dat matsindf:::where_to_get_args(list(b = 2), FUN = example_fun) #> $a #>   source arg_name  #>    \"FUN\"      \"a\"  #>  #> $b #>   source arg_name  #>   \".dat\"      \"b\"  #>  # b now comes from ..., because ... takes precedence over .dat matsindf:::where_to_get_args(list(b = 2), FUN = example_fun, b = 3) #> $a #>   source arg_name  #>    \"FUN\"      \"a\"  #>  #> $b #>   source arg_name  #>    \"...\"      \"b\"  #>  # Mapping from c in .dat to b in FUN matsindf:::where_to_get_args(list(c = 2),                              FUN = example_fun, b = \"c\") #> $a #>   source arg_name  #>    \"FUN\"      \"a\"  #>  #> $b #>   source arg_name  #>   \".dat\"      \"c\"  #>  # Redirect from an arg in ... to a different default to FUN matsindf:::where_to_get_args(FUN = example_fun, b = \"a\") #> $a #>   source arg_name  #>    \"FUN\"      \"a\"  #>  #> $b #>   source arg_name  #>    \"FUN\"      \"a\"  #>  # b is found in FUN, not in .dat, because the mapping (b = \"a\") # is not available in .dat matsindf:::where_to_get_args(list(b = 2), FUN = example_fun, b = \"a\") #> $a #>   source arg_name  #>    \"FUN\"      \"a\"  #>  #> $b #>   source arg_name  #>    \"FUN\"      \"a\"  #>"},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-047-2023-12-20","dir":"Changelog","previous_headings":"","what":"matsindf 0.4.7 (2023-12-20)","title":"matsindf 0.4.7 (2023-12-20)","text":"Added statement need README file. Still 377 tests, passing. Test coverage remains 100%.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-046-2023-12-09-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.4.6 (2023-12-09)","title":"matsindf 0.4.6 (2023-12-09)","text":"CRAN release: 2023-12-10 Fix pkgdown website GitHub. Still 377 tests, passing. Test coverage remains 100%.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-045-2023-12-01-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.4.5 (2023-12-01)","title":"matsindf 0.4.5 (2023-12-01)","text":"CRAN release: 2023-12-02 Added code conduct contributing pages documentation. Still 377 tests, passing. Test coverage remains 100%.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-044-2023-08-18-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.4.4 (2023-08-18)","title":"matsindf 0.4.4 (2023-08-18)","text":"CRAN release: 2023-08-18 Fixed bug matsindf_apply() data frame column named elements unnamed elements led unnamed elements yielding 0 NULL results FUN applied. fix unname() everything calling purrr::transpose(). Added line break separator df_to_msg() make error reports easier read. Now 377 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-043-2023-05-23-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.4.3 (2023-05-23)","title":"matsindf 0.4.3 (2023-05-23)","text":"CRAN release: 2023-05-23 Deprecated matrix.class argument. removed soon. Renamed matrix.class argument matrix_class. Now 376 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-042-2023-05-04-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.4.2 (2023-05-04)","title":"matsindf 0.4.2 (2023-05-04)","text":"Move latest version GitHub test coverage workflow. version released CRAN. Still 374 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-041-2023-04-26-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.4.1 (2023-04-26)","title":"matsindf 0.4.1 (2023-04-26)","text":"CRAN release: 2023-04-26 mapping length-1 strings ... argument matsindf_apply() now extends default arguments FUN. rewrite matsindf_apply() enables better error warning messages many places. matsindf_apply() now correctly returns list lists provided ... argument. Previously, incorrectly returned data frame. matsindf_apply() now correctly disallows unused arguments supplied ... argument. Previously, unused argument situations flagged errors, despite documentation saying . matsindf_apply() now gives warning messages argument FUN found ..., .dat, defaults FUN. condition may OK, caller can suppress warning passing .warn_missing_FUN_args = FALSE matsindf_apply(). matsindf_apply() now gives descriptive error messages. matsindf_apply() now allows options incoming data. matsindf_apply() now tries really hard deal empty inputs, falling back returning original input unmodified (except possibly wrapped list()) input zero rows (case data frame) zero length (case lists). Now 374 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-040-2023-03-07-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.4.0 (2023-03-07)","title":"matsindf 0.4.0 (2023-03-07)","text":"CRAN release: 2023-03-08 functions now work matrix Matrix objects, thereby enabling use sparse matrices. Use matsbyname::Matrix() create sparse matrices appropriate. mat_to_rowcolval() now accepts Matrix objects .matrix argument. rowcolval_to_mat() gains matrix.class argument specifies whether matrix Matrix created. Now 323 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-0312-2023-01-24-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.12 (2023-01-24)","title":"matsindf 0.3.12 (2023-01-24)","text":"CRAN release: 2023-01-24 Fixed differential error message challenge tests. Move tests associated verify_cols_missing() Recca package matsindf. tests didn’t belong Recca. Updated latest version github actions continuous integration workflow. Better docs expand_to_tidy(). New function matrix_cols() tells columns contain matrices, either () sense () sense. Improved matsindf_apply() primer vignette discusses handle heterogeneous arguments types FUN. Now 209 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-0311-2022-05-18-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.11 (2022-05-18)","title":"matsindf 0.3.11 (2022-05-18)","text":"CRAN release: 2022-05-19 Fixed subtle bug matsindf_apply() list returned Map() names individual item. names individual items caused problems later calling binary (n-ary) matsbyname function named unnamed list, functions expect name structure. solution remove names individual item calling Map() calling purrr::transpose(). Still 195 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-0310-2021-12-17-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.10 (2021-12-17)","title":"matsindf 0.3.10 (2021-12-17)","text":"CRAN release: 2021-12-17 New vignette Alexander Davis shows use matsindf principal components analysis (PCA). Move testthat v3. Adapt refactoring RCLabels package matsbyname. rowtypes coltypes arguments now special defaults enable calling collapse_to_matrices() without specifying arguments. Added tests collapse_to_matrices() check whether NULL values rowtype coltype arguments handled correctly. Now 195 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-039-2021-10-02-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.9 (2021-10-02)","title":"matsindf 0.3.9 (2021-10-02)","text":"CRAN release: 2021-10-03 New function df_to_msg() can assist error messages. df_to_msg() moved SEAPSUTWorkflow package, generally useful. Now 178 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-038-2021-09-02-doi","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.8 (2021-09-02)","title":"matsindf 0.3.8 (2021-09-02)","text":"CRAN release: 2021-09-03 matsindf.Rmd vignette now uses keep argument matsbyname::hatize_byname(). Fixed bug matsindf.Rmd vignette. Needed supply keep argument hatize_byname(). Added test name collision matsindf_apply(). Now 177 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-037-2021-04-11","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.7 (2021-04-11)","title":"matsindf 0.3.7 (2021-04-11)","text":"released CRAN, changes code . Move away Travis GitHub Actions continuous integration testing. Added new tests matsindf_apply() functions similar form Recca. Changed names test files “test-*.R” conform expectations. Removed context() calls top test files. Added new test confirming passing list strings works NULL .DF matsindf_apply(). Now 176 tests, passing. Test coverage remains 100 %.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-036-2020-08-24","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.6 (2020-08-24)","title":"matsindf 0.3.6 (2020-08-24)","text":"CRAN release: 2020-08-24 comply breaking change dplyr, calls dplyr::group_by() now use .add argument instead add argument.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-035-2020-04-13","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.5 (2020-04-13)","title":"matsindf 0.3.5 (2020-04-13)","text":"Now using GitHub actions continuous integration building pkgdown site.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-034-2020-03-21","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.4 (2020-03-21)","title":"matsindf 0.3.4 (2020-03-21)","text":"CRAN release: 2020-03-22 Maintenance release prepare dplyr 1.0.0. Several tests matsindf assumed dplyr functions returned data.frames. Now many dplyr functions return tibbles, matsindf tests needed rewritten. tests pass vs. dplyr 0.8.5. One warning remains testing matsindf dplyr 1.0.0, namely add argument group_buy() deprecated. dplyr 1.0.0 released CRAN, convert add .add, per dplyr authors’ recommendation.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-033-2020-03-03","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.3 (2020-03-03)","title":"matsindf 0.3.3 (2020-03-03)","text":"CRAN release: 2020-03-04 maintenance prepare R4.0.0. Prior R4.0.0, data.frame() stringsAsFactors = TRUE default. R4.0.0, stringsAsFactors = FALSE default. one test (“small example works expected”), relying current behavior (stringsAsFactors = TRUE). reliance removed test also pass R4.0.0.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-032-2019-12-05","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.2 (2019-12-05)","title":"matsindf 0.3.2 (2019-12-05)","text":"CRAN release: 2019-12-06 Maintenance release prepare R4.0.0. matrix objects now inherit matrix array. Thus, code longer assume class() returns object length 1 matrix. , eliminated instances class() == \"matrix\" statements favor inherits(, \"matrix\"). See https://developer.r-project.org/Blog/public/2019/11/09/--think-class.-think-/index.html details.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-031-2019-10-26","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.1 (2019-10-26)","title":"matsindf 0.3.1 (2019-10-26)","text":"CRAN release: 2019-10-27 Refactored group_by_everything_except() use new helper function everything_except() New function group_by_everything_except() Added CRAN badge.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-030-2019-02-05","dir":"Changelog","previous_headings":"","what":"matsindf 0.3.0 (2019-02-05)","title":"matsindf 0.3.0 (2019-02-05)","text":"CRAN release: 2019-02-11 Address questions CRAN: - Title case: Matrices Data Frames - \\dontrun{} –> \\donttest{} Roxygen examples Fully-qualified function calls matsindf functions. Now importing := .data high level. Added TravisCI integration Added code coverage","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-0212-2019-01-07","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.12 (2019-01-07)","title":"matsindf 0.2.12 (2019-01-07)","text":"Now importing magrittr pipe high level.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-0211-2018-11-13","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.11 (2018-11-13)","title":"matsindf 0.2.11 (2018-11-13)","text":"Now creating README.md README.Rmd pkgdown documentation.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-0210-2018-11-08","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.10 (2018-11-08)","title":"matsindf 0.2.10 (2018-11-08)","text":"Breaking change: Default values rowtypes coltypes arguments expand_to_tidy collapse_to_matrices functions longer NULL. Rather, “rowtypes” “coltypes”.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-029-2018-11-06","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.9 (2018-11-06)","title":"matsindf 0.2.9 (2018-11-06)","text":"Extended matsindf_apply primer include sections using matsindf_apply data frame programming.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-028-2018-11-01","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.8 (2018-11-01)","title":"matsindf 0.2.8 (2018-11-01)","text":"Added new vignette documentation website, required moving .Rnw .Rmd file.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-027-2018-10-30","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.7 (2018-10-30)","title":"matsindf 0.2.7 (2018-10-30)","text":"Added documentation website.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-026-2018-07-03","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.6 (2018-07-03)","title":"matsindf 0.2.6 (2018-07-03)","text":"New function index_column ratios numbers matrices relative initial time. Many documentation improvements.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-025-2018-05-23","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.5 (2018-05-23)","title":"matsindf 0.2.5 (2018-05-23)","text":"expand_to_tidy now accepts named list matrices input.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-024-2018-05-22","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.4 (2018-05-22)","title":"matsindf 0.2.4 (2018-05-22)","text":"matsindf_apply now obtains named arguments .DF name .DF matches name argument FUN. behavior overridden supplying string argument ... matsindf_apply.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-023-2018-05-22","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.3 (2018-05-22)","title":"matsindf 0.2.3 (2018-05-22)","text":"matsindf_apply now accepts list input arguments strings.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-022-2018-05-20","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.2 (2018-05-20)","title":"matsindf 0.2.2 (2018-05-20)","text":"New matsindf_apply function. functions now use matsindf_apply.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-021-2018-02-23","dir":"Changelog","previous_headings":"","what":"matsindf 0.2.1 (2018-02-23)","title":"matsindf 0.2.1 (2018-02-23)","text":"Now uses renamed matsbyname package.","code":""},{"path":"https://matthewheun.github.io/matsindf/news/index.html","id":"matsindf-02-2018-02-21","dir":"Changelog","previous_headings":"","what":"matsindf 0.2 (2018-02-21)","title":"matsindf 0.2 (2018-02-21)","text":"Initial version.","code":""}]
